/**
 * РНУ-101
 * @author auldanov
 * TODO
 *
 * @version 59
 *
 * rowNumber - № пп
 * dependentPerson - Взаимозависимое лицо (резидент оффшорной зоны)
 * operationDate - Дата совершения операции
 * classCode - Код классификации дохода
 * number - номер
 * date - дата
 * sum - Сумма операции (сумма оборота по операции) / количество операций
 * tariff - Тариф за оказание услуги
 * taxTariff - Тариф, признаваемый рыночным для целей налогообложения
 * incomeSumAccounting - по данным бухгалтерского учёта
 * incomeSumRelevantMarket - соответствующая рыночному уровню
 * incomeSumAccrued - доначисляемая до рыночного уровня
 */
/**
 * Выполнение действий по событиям
 *
 */
switch (formDataEvent){
// Инициирование Пользователем проверки данных формы в статусе «Создана», «Подготовлена», «Утверждена», «Принята»
    case FormDataEvent.CHECK:
        //1. Логические проверки значений налоговой формы
        logicalCheck()
        //2. Проверки соответствия НСИ
        NCICheck()
        break
// Инициирование Пользователем создания формы
    case FormDataEvent.CREATE:
        //1.	Проверка наличия и статуса формы, консолидирующей данные текущей налоговой формы, при создании формы.
        //2.	Логические проверки значений налоговой.
        logicalCheck()
        //3.	Проверки соответствия НСИ.
        break
// Инициирование Пользователем перехода «Подготовить»
    case FormDataEvent.MOVE_CREATED_TO_PREPARED:
        //1.	Проверка наличия и статуса формы, консолидирующей данные текущей налоговой формы, при переходе в статус «Подготовлена».
        //2.	Логические проверки значений налоговой формы.
        logicalCheck()
        //3.	Проверки соответствия НСИ.
        break
// Инициирование Пользователем  выполнение перехода «Утвердить»
    case FormDataEvent.MOVE_CREATED_TO_APPROVED:
        //1.	Проверка наличия и статуса формы, консолидирующей данные текущей налоговой формы, при переходе в статус «Утверждена».
        //2.	Логические проверки значений налоговой формы.
        //3.	Проверки соответствия   НСИ.
        break
// Инициирование Пользователем  выполнение перехода «Принять»
    case FormDataEvent.MOVE_APPROVED_TO_ACCEPTED:
        //1.	Проверка наличия и статуса формы, консолидирующей данные текущей налоговой формы, при переходе в статус «Принята».
        //2.	Логические проверки значений налоговой формы.
        //3.	Проверки соответствия НСИ.
        break
// Инициирование Пользователем выполнения перехода «Отменить принятие»
    case FormDataEvent.MOVE_ACCEPTED_TO_APPROVED:
        //1.	Проверка наличия и статуса формы, консолидирующей данные текущей налоговой формы, при переходе «Отменить принятие».
        //2.	Логические проверки значений налоговой формы.
        //3.	Проверки соответствия НСИ.
        break

// Событие добавить строку
    case FormDataEvent.ADD_ROW:
        addNewRow()
        break

// событие удалить строку
    case FormDataEvent.DELETE_ROW:
        break

    case FormDataEvent.CALCULATE:
        fillForm()
        break
}

/**
 * Функция добавления новой строки
 */
def addNewRow(){
    // добавим строку
    def newRow = formData.appendDataRow((DataRow) currentDataRow, "R"+Random.newInstance().nextInt())
    // разрешим редактировать поля

    ['dependentPerson', 'operationDate', 'classCode', 'number', 'date', 'sum', 'tariff', 'taxTariff', 'incomeSumRelevantMarket'].each{ alias->
        newRow.getCell(alias).setEditable(true)
    }
}

/**
 * Расчеты
 */
def fillForm(){

    /**
     * Табл. 238 Алгоритмы заполнения полей формы
     * «Регистр налогового учёта доходов, возникающих в связи с применением в сделках с Взаимозависимыми лицами и резидентами оффшорных зон тарифов, не соответствующих рыночному уровню»
     */
    // Графа 1
    // TODO еще не реализовано, поскольку еще нет ясности про нумерацию

    /*
     * Графа 10 заполняется по следующему алгоритму:
     * 1.	В РНУ-4 находим строку «Итого по коду …» для кода классификации дохода, значение которого совпадает со значением «графы 4» РНУ-101.
     * 2.	«графа 10» = итоговое значение «графы 5» РНУ-4 из строки, найденной в пункте 1.
     */
    // TODO как находить? Он будет вида источник назначение?

    // «графа 12» = «графа 11» - «графа 10»
    row.incomeSumAccrued = row.incomeSumRelevantMarket - row.incomeSumAccounting





    /**
     * Табл. 239  Алгоритмы  заполнения итоговых строк формы
     * «Регистр налогового учёта доходов, возникающих в связи с применением в сделках с Взаимозависимыми лицами и резидентами оффшорных зон тарифов, не соответствующих рыночному уровню»
     */

    // Графа 2 Заполняется значением «Всего по Взаимозависимому лицу (резиденту оффшорной зоны)»
    // TODO что за значение?

    // Графы 7, 10-12 Для каждой из указанных граф содержит сумму всех значений по данной графе по всем строкам, не включая значения для строки итогов
    // вычислим суммы
    def sum7 = 0
    def sum10 = 0
    def sum11 = 0
    def sum12 = 0
    formData.dataRows.each{ row ->
        if (row.getAlias() != 'total'){
            sum7 += row.sum
            sum10 += row.incomeSumAccounting
            sum11 += row.incomeSumRelevantMarket
            sum12 += row.incomeSumAccrued
        }
    }
    def totalRow = formData.getDataRow('total')
    totalRow.sum = sum7
    totalRow.incomeSumAccounting = sum10
    totalRow.incomeSumRelevantMarket = sum11
    totalRow.incomeSumAccrued = sum12
}

/**
 * 6.48.2.4.1 Логические проверки
 */
def logicalCheck(){
    /**
     * Табл. 240 Логически проверки формы «Регистр налогового учёта доходов,
     * возникающих в связи с применением в сделках с Взаимозависимыми лицами и резидентами оффшорных зон тарифов,
     * не соответствующих рыночному уровню»
     */


}