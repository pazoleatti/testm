import com.aplana.sbrf.taxaccounting.model.Column
import com.aplana.sbrf.taxaccounting.model.ColumnType
import com.aplana.sbrf.taxaccounting.model.FormStyle
import com.aplana.sbrf.taxaccounting.model.FormTemplate
import com.aplana.sbrf.taxaccounting.model.FormType
import org.apache.commons.io.IOUtils

/**
 Создает макет НФ, кроме таблицы для хранения данных
 # Инструкция:
 Вставить текст данного скрипта на странице, соответствующей ссылке с окончанием:
 .../gwtapp/#!scriptExecution
 Нажать "Выполнить".

 */

boolean createType = true
boolean createTemplate = true
boolean addColumns = true
boolean addStyles = true
boolean addDataRows = true
boolean addDataHeaders = true
boolean addScript = true

try {
    // id типа формы, имя типа формы, вид налога(I, T, V, D, P, E), включать в ИФРС(флаг), имя ИФРС
    FormType formType = new FormType()
    formType.setId(848)
    formType.setName('(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды')
    formType.setTaxType(TaxType.VAT)
    formType.setIsIfrs(false)
    formType.setIfrsName('')
    formType.setCode('724.1.1')
    // id шаблона формы, имя шаблона короткое, имя шаблона полное, год версии, ежемесячность(флаг), код
    FormTemplate formTemplate = new FormTemplate()
    formTemplate.setId(848)
    formTemplate.setFixedRows(false)
    formTemplate.setName('(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды')
    formTemplate.setFullName('(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды')
    formTemplate.setVersion(Date.parse('dd.MM.yyyy', '01.01.2015'))
    formTemplate.setMonthly(false)
    formTemplate.setHeader('724.1.1')
    formTemplate.setComparative(false)
    formTemplate.setAccruing(false)
    formTemplate.setUpdating(false)

    def form_type_id = formType.id
    def form_template_id = formTemplate.id

    def rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from FORM_TYPE where id = $form_type_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Макет НФ с данным id = $form_type_id уже существует в системе!")
        if (createType) {
            return
        }
    }

    rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from FORM_TEMPLATE where id = $form_template_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Версия макета НФ с данным id = $form_template_id уже существует в системе!")
        if (createTemplate) {
            return
        }
    }

    addTypeTemplate(formType, formTemplate, createType, createTemplate)

    List<Column> formColumns = new ArrayList<>()
	def referenceColumnMap = [:]

    //Добавление колонок
    // NAME, ALIAS, TYPE, WIDTH, PRECISION, MAX_LENGTH, CHECKING, ATTRIBUTE_ID, FORMAT, FILTER, PARENT_COLUMN_ID, ATTRIBUTE_ID2, NUMERATION_ROW
    if (addColumns) {
        def Column formColumn = new AutoNumerationColumn()
        formColumn.setOrder(1)
        formColumn.setName('№ пп')
        formColumn.setAlias('rowNum')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Автонумеруемая графа')})
        formColumn.setWidth(5)
        formColumn.setChecking(false)
        formColumn.setNumerationType(NumerationType.getById(1))
        formColumns.add(formColumn)

        formColumn = new StringColumn()
        formColumn.setOrder(2)
        formColumn.setName('fix')
        formColumn.setAlias('fix')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Строка')})
        formColumn.setWidth(0)
        formColumn.setChecking(false)
        formColumn.setMaxLength(2000)
        formColumn.setPrevLength(0)
        formColumns.add(formColumn)

        formColumn = new RefBookColumn()
        formColumn.setOrder(3)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки налоговой базы. Налоговый период, за который вносится корректировка')
        formColumn.setAlias('period')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Справочник')})
        formColumn.setWidth(10)
        formColumn.setChecking(false)
        formColumn.setRefBookAttributeId(26)
        formColumn.setRefBookAttributeId2(null)
        formColumn.setNameAttributeId(26)
        formColumn.setFilter("NAME = 'первый квартал' OR NAME = 'второй квартал' OR NAME = 'третий квартал' OR NAME = 'четвёртый квартал'" ?: null)
        formColumns.add(formColumn)

        formColumn = new RefBookColumn()
        formColumn.setOrder(4)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки налоговой базы. Номер балансового счёта')
        formColumn.setAlias('number')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Справочник')})
        formColumn.setWidth(10)
        formColumn.setChecking(false)
        formColumn.setRefBookAttributeId(900)
        formColumn.setRefBookAttributeId2(null)
        formColumn.setNameAttributeId(900)
        formColumn.setFilter("" ?: null)
        formColumns.add(formColumn)

        formColumn = new NumericColumn()
        formColumn.setOrder(5)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки налоговой базы. Сумма корректировки (+)')
        formColumn.setAlias('sumPlus')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Число')})
        formColumn.setWidth(11)
        formColumn.setChecking(false)
        formColumn.setPrecision(2)
        formColumn.setMaxLength(16)
        formColumns.add(formColumn)

        formColumn = new NumericColumn()
        formColumn.setOrder(6)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки налоговой базы. Сумма корректировки (-)')
        formColumn.setAlias('sumMinus')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Число')})
        formColumn.setWidth(11)
        formColumn.setChecking(false)
        formColumn.setPrecision(2)
        formColumn.setMaxLength(16)
        formColumns.add(formColumn)

        formColumn = new RefBookColumn()
        formColumn.setOrder(7)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки НДС. Номер балансового счёта')
        formColumn.setAlias('numberNds')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Справочник')})
        formColumn.setWidth(10)
        formColumn.setChecking(false)
        formColumn.setRefBookAttributeId(900)
        formColumn.setRefBookAttributeId2(null)
        formColumn.setNameAttributeId(900)
        formColumn.setFilter("" ?: null)
        formColumns.add(formColumn)

        formColumn = new NumericColumn()
        formColumn.setOrder(8)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки НДС. Сумма корректировки (+)')
        formColumn.setAlias('sumNdsPlus')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Число')})
        formColumn.setWidth(11)
        formColumn.setChecking(false)
        formColumn.setPrecision(2)
        formColumn.setMaxLength(16)
        formColumns.add(formColumn)

        formColumn = new NumericColumn()
        formColumn.setOrder(9)
        formColumn.setName('Данные бухгалтерского учёта. Величина корректировки НДС. Сумма корректировки (-)')
        formColumn.setAlias('sumNdsMinus')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Число')})
        formColumn.setWidth(11)
        formColumn.setChecking(false)
        formColumn.setPrecision(2)
        formColumn.setMaxLength(16)
        formColumns.add(formColumn)

        formColumn = new StringColumn()
        formColumn.setOrder(10)
        formColumn.setName('Ставка НДС')
        formColumn.setAlias('rateNds')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Строка')})
        formColumn.setWidth(10)
        formColumn.setChecking(false)
        formColumn.setMaxLength(6)
        formColumn.setPrevLength(0)
        formColumns.add(formColumn)

        formColumn = new NumericColumn()
        formColumn.setOrder(11)
        formColumn.setName('Сумма НДС по дополнительным листам книги продаж (разделы 1-7)/книги покупок (разделы 8-9)')
        formColumn.setAlias('sum')
        formColumn.setColumnType(ColumnType.find{ it.title.equals('Число')})
        formColumn.setWidth(11)
        formColumn.setChecking(false)
        formColumn.setPrecision(2)
        formColumn.setMaxLength(16)
        formColumns.add(formColumn)


        formTemplate.getColumns().addAll(formColumns)
        columnDaoImpl.createFormColumns(formColumns, formTemplate)

	  	referenceColumnMap.each { alias, parentAlias ->
			def column = formColumns.find{ it.alias == alias }
			if (column != null) {
				column.setParentAlias(parentAlias)
			} else {
				logger.error("Родительская колонка с псевдонимом $parentAlias не обнаружена!")
			}
		}

        if (!referenceColumnMap.isEmpty()) {
            columnDaoImpl.updateFormColumns(formColumns, formTemplate)
        }

        logger.info("К версии макета добавлены колонки")
    }

    List<FormStyle> formStyles = new ArrayList<>()

    if (addStyles) {
        def FormStyle formStyle = new FormStyle()
        formStyle.setAlias('Контрольные суммы')
        formStyle.setBackColor(Color.getById(2))
        formStyle.setBold(true)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Автозаполняемая')
        formStyle.setBackColor(Color.getById(4))
        formStyle.setBold(true)
        formStyle.setFontColor(Color.getById(13))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Редактируемая')
        formStyle.setBackColor(Color.getById(3))
        formStyle.setBold(false)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Заголовок')
        formStyle.setBackColor(Color.getById(6))
        formStyle.setBold(true)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Корректировка-добавлено')
        formStyle.setBackColor(Color.getById(12))
        formStyle.setBold(false)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Корректировка-удалено')
        formStyle.setBackColor(Color.getById(8))
        formStyle.setBold(false)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Корректировка-без изменений')
        formStyle.setBackColor(Color.getById(6))
        formStyle.setBold(false)
        formStyle.setFontColor(Color.getById(0))
        formStyle.setItalic(false)
        formStyles.add(formStyle)

        formStyle = new FormStyle()
        formStyle.setAlias('Корректировка-изменено')
        formStyle.setBackColor(Color.getById(4))
        formStyle.setBold(true)
        formStyle.setFontColor(Color.getById(10))
        formStyle.setItalic(false)
        formStyles.add(formStyle)


        formTemplate.getStyles().addAll(formStyles)
        formStyleDaoImpl.saveFormStyles(formTemplate)
        logger.info("К версии макета добавлены стили")
    }

    String longString = ''

    if (addDataRows) {
        longString += ''

        addLongText(form_template_id, longString, 'DATA_ROWS')
        logger.info("К версии макета добавлены фиксированные строки")
    }

    longString = ''
    if (addDataHeaders) {
        longString += 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48cm93cz4NCiAgPHJvdyBhbGlhcz0iIj4NCiAgICA8Y2VsbCBhbGlhcz0icm93TnVtIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIzIiB2YWx1ZT0i4oSWINC/0L8iLz4NCiAgICA8Y2VsbCBhbGlhcz0iZml4IiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0iIi8+DQogICAgPGNlbGwgYWxpYXM9InBlcmlvZCIgY29sU3Bhbj0iNyIgcm93U3Bhbj0iMSIgdmFsdWU9ItCU0LDQvdC90YvQtSDQsdGD0YXQs9Cw0LvRgtC10YDRgdC60L7Qs9C+INGD0YfRkdGC0LAiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JTQsNC90L3Ri9C1INCx0YPRhdCz0LDQu9GC0LXRgNGB0LrQvtCz0L4g0YPRh9GR0YLQsC4g0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQvdCw0LvQvtCz0L7QstC+0Lkg0LHQsNC30YsuINCd0L7QvNC10YAg0LHQsNC70LDQvdGB0L7QstC+0LPQviDRgdGH0ZHRgtCwIi8+DQogICAgPGNlbGwgYWxpYXM9InN1bVBsdXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiy4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoKykiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTWludXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiy4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoLSkiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyTmRzIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JTQsNC90L3Ri9C1INCx0YPRhdCz0LDQu9GC0LXRgNGB0LrQvtCz0L4g0YPRh9GR0YLQsC4g0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQndCU0KEuINCd0L7QvNC10YAg0LHQsNC70LDQvdGB0L7QstC+0LPQviDRgdGH0ZHRgtCwIi8+DQogICAgPGNlbGwgYWxpYXM9InN1bU5kc1BsdXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INCd0JTQoS4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoKykiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTmRzTWludXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INCd0JTQoS4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoLSkiLz4NCiAgICA8Y2VsbCBhbGlhcz0icmF0ZU5kcyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMyIgdmFsdWU9ItCh0YLQsNCy0LrQsCDQndCU0KEiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIzIiB2YWx1ZT0i0KHRg9C80LzQsCDQndCU0KEg0L/QviDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C8INC70LjRgdGC0LDQvCDQutC90LjQs9C4INC/0YDQvtC00LDQtiAo0YDQsNC30LTQtdC70YsgMS03KS/QutC90LjQs9C4INC/0L7QutGD0L/QvtC6ICjRgNCw0LfQtNC10LvRiyA4LTkpIi8+DQogIDwvcm93Pg0KICA8cm93IGFsaWFzPSIiPg0KICAgIDxjZWxsIGFsaWFzPSJyb3dOdW0iIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLihJYg0L/QvyIvPg0KICAgIDxjZWxsIGFsaWFzPSJmaXgiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSIiLz4NCiAgICA8Y2VsbCBhbGlhcz0icGVyaW9kIiBjb2xTcGFuPSI0IiByb3dTcGFuPSIxIiB2YWx1ZT0i0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQvdCw0LvQvtCz0L7QstC+0Lkg0LHQsNC30YsiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JTQsNC90L3Ri9C1INCx0YPRhdCz0LDQu9GC0LXRgNGB0LrQvtCz0L4g0YPRh9GR0YLQsC4g0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQvdCw0LvQvtCz0L7QstC+0Lkg0LHQsNC30YsuINCd0L7QvNC10YAg0LHQsNC70LDQvdGB0L7QstC+0LPQviDRgdGH0ZHRgtCwIi8+DQogICAgPGNlbGwgYWxpYXM9InN1bVBsdXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiy4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoKykiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTWludXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwLiDQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiy4g0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoLSkiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyTmRzIiBjb2xTcGFuPSIzIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQndCU0KEiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTmRzUGx1cyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCU0LDQvdC90YvQtSDQsdGD0YXQs9Cw0LvRgtC10YDRgdC60L7Qs9C+INGD0YfRkdGC0LAuINCS0LXQu9C40YfQuNC90LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60Lgg0J3QlNChLiDQodGD0LzQvNCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4ICgrKSIvPg0KICAgIDxjZWxsIGFsaWFzPSJzdW1OZHNNaW51cyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCU0LDQvdC90YvQtSDQsdGD0YXQs9Cw0LvRgtC10YDRgdC60L7Qs9C+INGD0YfRkdGC0LAuINCS0LXQu9C40YfQuNC90LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60Lgg0J3QlNChLiDQodGD0LzQvNCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4ICgtKSIvPg0KICAgIDxjZWxsIGFsaWFzPSJyYXRlTmRzIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHRgtCw0LLQutCwINCd0JTQoSIvPg0KICAgIDxjZWxsIGFsaWFzPSJzdW0iIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQodGD0LzQvNCwINCd0JTQoSDQv9C+INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0Lwg0LvQuNGB0YLQsNC8INC60L3QuNCz0Lgg0L/RgNC+0LTQsNC2ICjRgNCw0LfQtNC10LvRiyAxLTcpL9C60L3QuNCz0Lgg0L/QvtC60YPQv9C+0LogKNGA0LDQt9C00LXQu9GLIDgtOSkiLz4NCiAgPC9yb3c+DQogIDxyb3cgYWxpYXM9IiI+DQogICAgPGNlbGwgYWxpYXM9InJvd051bSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IuKEliDQv9C/Ii8+DQogICAgPGNlbGwgYWxpYXM9ImZpeCIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IiIvPg0KICAgIDxjZWxsIGFsaWFzPSJwZXJpb2QiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQndCw0LvQvtCz0L7QstGL0Lkg0L/QtdGA0LjQvtC0LCDQt9CwINC60L7RgtC+0YDRi9C5INCy0L3QvtGB0LjRgtGB0Y8g0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LAiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0L3QvtC80LXRgCDQsdCw0LvQsNC90YHQvtCy0L7Qs9C+INGB0YfRkdGC0LAiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtUGx1cyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0YPQvNC80LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCspIi8+DQogICAgPGNlbGwgYWxpYXM9InN1bU1pbnVzIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoLSkiLz4NCiAgICA8Y2VsbCBhbGlhcz0ibnVtYmVyTmRzIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0L3QvtC80LXRgCDQsdCw0LvQsNC90YHQvtCy0L7Qs9C+INGB0YfRkdGC0LAiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTmRzUGx1cyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0YPQvNC80LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCspIi8+DQogICAgPGNlbGwgYWxpYXM9InN1bU5kc01pbnVzIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoLSkiLz4NCiAgICA8Y2VsbCBhbGlhcz0icmF0ZU5kcyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0YLQsNCy0LrQsCDQndCU0KEiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHRg9C80LzQsCDQndCU0KEg0L/QviDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C8INC70LjRgdGC0LDQvCDQutC90LjQs9C4INC/0YDQvtC00LDQtiAo0YDQsNC30LTQtdC70YsgMS03KS/QutC90LjQs9C4INC/0L7QutGD0L/QvtC6ICjRgNCw0LfQtNC10LvRiyA4LTkpIi8+DQogIDwvcm93Pg0KICA8cm93IGFsaWFzPSIiPg0KICAgIDxjZWxsIGFsaWFzPSJyb3dOdW0iIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSIxIi8+DQogICAgPGNlbGwgYWxpYXM9ImZpeCIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IiIvPg0KICAgIDxjZWxsIGFsaWFzPSJwZXJpb2QiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSIyIi8+DQogICAgPGNlbGwgYWxpYXM9Im51bWJlciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IjMiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtUGx1cyIgY29sU3Bhbj0iMiIgcm93U3Bhbj0iMSIgdmFsdWU9IjQiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTWludXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSI1Ii8+DQogICAgPGNlbGwgYWxpYXM9Im51bWJlck5kcyIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IjUiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTmRzUGx1cyIgY29sU3Bhbj0iMiIgcm93U3Bhbj0iMSIgdmFsdWU9IjYiLz4NCiAgICA8Y2VsbCBhbGlhcz0ic3VtTmRzTWludXMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSI4Ii8+DQogICAgPGNlbGwgYWxpYXM9InJhdGVOZHMiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSI3Ii8+DQogICAgPGNlbGwgYWxpYXM9InN1bSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9IjgiLz4NCiAgPC9yb3c+DQo8L3Jvd3M+'

        addLongText(form_template_id, longString, 'DATA_HEADERS')
        logger.info("К версии макета добавлен заголовок")
    }

    longString = ''
    if (addScript) {
        longString += ''
        longString += 'clNlY3Rpb242ICYmIGVtcHR5Q29sdW1uc183XzkuZmluZCB7IHJvd1tpdF0gIT0gbnVsbCB9ICE9IG51bGwpIHsNCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigi0KHRgtGA0L7QutCwICRpbmRleDog0JPRgNCw0YTRiyDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCssIC0pINC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiyAo0YDQsNC30LTQtdC7IDctOSkg0L3QtSDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0LfQsNC/0L7Qu9C90LXQvdGLISIpDQogICAgICAgIH0NCg0KICAgICAgICAvLyAzLiDQn9GA0L7QstC10YDQutCwINC90LAg0LfQsNC/0L7Qu9C90LXQvdC40LUg0YXQvtGC0Y8g0LHRiyDQvtC00L3QvtC5INC40Lcg0LPRgNCw0YQgwqsrwrssIMKrLcK7INGBINGB0YPQvNC80L7QuSDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuA0KICAgICAgICAvLyA0LiDQn9GA0L7QstC10YDQutCwINC/0L7Qu9C+0LbQuNGC0LXQu9GM0L3QvtGB0YLQuCDRgdGD0LzQvNGLINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4DQogICAgICAgIC8vIDUuINCf0YDQvtCy0LXRgNC60LAg0L7RgtGA0LjRhtCw0YLQtdC70YzQvdC+0YHRgtC4INGB0YPQvNC80Ysg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LgNCiAgICAgICAgaWYgKCFpc0FmdGVyU2VjdGlvbjYpIHsNCiAgICAgICAgICAgIGlmIChyb3cuc3VtUGx1cyA9PSBudWxsICYmIHJvdy5zdW1NaW51cyA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCLQodGC0YDQvtC60LAgJGluZGV4OiDQlNC+0LvQttC90LAg0LHRi9GC0Ywg0LfQsNC/0L7Qu9C90LXQvdCwINGF0L7RgtGPINCx0Ysg0L7QtNC90LAg0LjQtyDQs9GA0LDRhCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCssIC0pINC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiyAo0YDQsNC30LTQtdC7IDEtNikhIikNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyb3cuc3VtUGx1cyAhPSBudWxsICYmICEocm93LnN1bVBsdXMgPiAwKSkgew0KICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigi0KHRgtGA0L7QutCwICRpbmRleDog0JPRgNCw0YTQsCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCspINC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiyAo0YDQsNC30LTQtdC7IDEtNikg0LTQvtC70LbQvdCwINCx0YvRgtGMINC30LDQv9C+0LvQvdC10L3QsCDQt9C90LDRh9C10L3QuNC10Lwg0LHQvtC70YzRiNC1IMKrMMK7ISIpDQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAocm93LnN1bU1pbnVzICE9IG51bGwgJiYgIShyb3cuc3VtTWludXMgPCAwKSkgew0KICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigi0KHRgtGA0L7QutCwICRpbmRleDog0JPRgNCw0YTQsCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKC0pINC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiyAo0YDQsNC30LTQtdC7IDEtNikg0LTQvtC70LbQvdCwINCx0YvRgtGMINC30LDQv9C+0LvQvdC10L3QsCDQt9C90LDRh9C10L3QuNC10Lwg0LzQtdC90YzRiNC1IMKrMMK7ISIpDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAocm93LnN1bU5kc1BsdXMgPT0gbnVsbCAmJiByb3cuc3VtTmRzTWludXMgPT0gbnVsbCkgew0KICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCLQodGC0YDQvtC60LAgJGluZGV4OiDQlNC+0LvQttC90LAg0LHRi9GC0Ywg0LfQsNC/0L7Qu9C90LXQvdCwINGF0L7RgtGPINCx0Ysg0L7QtNC90LAg0LjQtyDQs9GA0LDRhCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCssIC0pINCd0JTQoSAo0YDQsNC30LTQtdC7IDEtOSkhIikNCiAgICAgICAgfQ0KICAgICAgICBpZiAocm93LnN1bU5kc1BsdXMgIT0gbnVsbCAmJiAhKHJvdy5zdW1OZHNQbHVzID4gMCkpIHsNCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigi0KHRgtGA0L7QutCwICRpbmRleDog0JPRgNCw0YTQsCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKCspINCd0JTQoSAo0YDQsNC30LTQtdC7IDEtOSkg0LTQvtC70LbQvdCwINCx0YvRgtGMINC30LDQv9C+0LvQvdC10L3QsCDQt9C90LDRh9C10L3QuNC10Lwg0LHQvtC70YzRiNC1IMKrMMK7ISIpDQogICAgICAgIH0NCiAgICAgICAgaWYgKHJvdy5zdW1OZHNNaW51cyAhPSBudWxsICYmICEocm93LnN1bU5kc01pbnVzIDwgMCkpIHsNCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigi0KHRgtGA0L7QutCwICRpbmRleDog0JPRgNCw0YTQsCDRgSDRgdGD0LzQvNC+0Lkg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKC0pINCd0JTQoSAo0YDQsNC30LTQtdC7IDEtOSkg0LTQvtC70LbQvdCwINCx0YvRgtGMINC30LDQv9C+0LvQvdC10L3QsCDQt9C90LDRh9C10L3QuNC10Lwg0LzQtdC90YzRiNC1IMKrMMK7ISIpDQogICAgICAgIH0NCg0KICAgICAgICAvLyA2LiDQn9GA0L7QstC10YDQutCwINC90L7QvNC10YDQsCDQsdCw0LvQsNC90YHQvtCy0L7Qs9C+INGB0YfQtdGC0LANCiAgICAgICAgaWYgKHJvdy5udW1iZXJOZHMgIT0gbnVsbCkgew0KICAgICAgICAgICAgZGVmIG51bWJlck5kcyA9IGdldFJlZkJvb2tWYWx1ZSgxMDEsIHJvdy5udW1iZXJOZHMpLkFDQ09VTlQudmFsdWUNCiAgICAgICAgICAgIGRlZiB2YWxpZE51bWJlcnMgPSBudW1iZXJNYXBbc2VjdGlvbl1bMF0NCiAgICAgICAgICAgIGlmIChzZWN0aW9uICE9IG51bGwgJiYgIXZhbGlkTnVtYmVycy5jb250YWlucyhudW1iZXJOZHMpKSB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCLQodGC0YDQvtC60LAgJGluZGV4OiDQk9GA0LDRhNCwIMKrJHtnZXRDb2x1bW5OYW1lKHJvdywnbnVtYmVyTmRzJyl9wrsg0LfQsNC/0L7Qu9C90LXQvdCwINC90LXQstC10YDQvdC+ISDQktC+0LfQvNC+0LbQvdGL0LUg0LfQvdCw0YfQtdC90LjRjyAo0YDQsNC30LTQtdC7ICR7bnVtYmVyTWFwW3NlY3Rpb25dWzFdfSk6INC/0YPRgdGC0L7QtSDQt9C90LDRh9C10L3QuNC1LCDCqyR7dmFsaWROdW1iZXJzLmpvaW4oJ8K7LCDCqycpfcK7LiIpDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyA3LiDQn9GA0L7QstC10YDQutCwINGB0YLQsNCy0LrQuCDQndCU0KENCiAgICAgICAgZGVmIHZhbGlkUmF0ZSA9IHJhdGVNYXBbc2VjdGlvbl1bMF0NCiAgICAgICAgaWYgKHJvdy5yYXRlTmRzICYmIHZhbGlkUmF0ZSAhPSByb3cucmF0ZU5kcykgew0KICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCLQodGC0YDQvtC60LAgJGluZGV4OiDQk9GA0LDRhNCwIMKrJHtnZXRDb2x1bW5OYW1lKHJvdywncmF0ZU5kcycpfcK7INC30LDQv9C+0LvQvdC10L3QsCDQvdC10LLQtdGA0L3QviEg0JLQvtC30LzQvtC20L3Ri9C1INC30L3QsNGH0LXQvdC40Y8gKNGA0LDQt9C00LXQuyAke3JhdGVNYXBbc2VjdGlvbl1bMV19KTogwqskdmFsaWRSYXRlwrsuIikNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIDguINCf0YDQvtCy0LXRgNC60LAg0YHRg9C80LzRiyDQndCU0KEg0L/QviDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C8INC70LjRgdGC0LDQvCDQutC90LjQs9C4INC/0L7QutGD0L/QvtC6INC4INC/0YDQvtC00LDQtg0KICAgICAgICBpZiAocm93LnN1bSAhPSBudWxsKSB7DQogICAgICAgICAgICBjYWxjQ2hlY2sxMChyb3csIHJvdy5zdW0pDQogICAgICAgIH0NCiAgICB9DQogICAgY29tcGFyZVNwZWNpZmljVG90YWxWYWx1ZXMoZGF0YVJvd3MsIGFycmFuZ2VSb3dzKGRhdGFSb3dzKSkNCn0NCg0Kdm9pZCBjb25zb2xpZGF0aW9uKCkgew0KICAgIGRlZiBkYXRhUm93SGVscGVyID0gZm9ybURhdGFTZXJ2aWNlLmdldERhdGFSb3dIZWxwZXIoZm9ybURhdGEpDQogICAgZGVmIGRhdGFSb3dzID0gZm9ybURhdGFTZXJ2aWNlLmdldEZvcm1UZW1wbGF0ZShmb3JtRGF0YS5mb3JtVHlwZS5pZCwgZm9ybURhdGEucmVwb3J0UGVyaW9kSWQpLnJvd3MNCiAgICB1cGRhdGVJbmRleGVzKGRhdGFSb3dzKQ0KDQogICAgLy8g0YHQvtCx0YDQsNGC0Ywg0LjQtyDQuNGB0YLQvtGH0L3QuNC60L7QsiDRgdGC0YDQvtC60Lgg0Lgg0YDQsNC30LzQtdGB0YLQuNGC0Ywg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQuNC8INGA0LDQt9C00LXQu9Cw0LwNCiAgICBkZXBhcnRtZW50Rm9ybVR5cGVTZXJ2aWNlLmdldEZvcm1Tb3VyY2VzKGZvcm1EYXRhRGVwYXJ0bWVudC5pZCwgZm9ybURhdGEuZm9ybVR5cGUuaWQsIGZvcm1EYXRhLmtpbmQsDQogICAgICAgICAgICBnZXRSZXBvcnRQZXJpb2RTdGFydERhdGUoKSwgZ2V0UmVwb3J0UGVyaW9kRW5kRGF0ZSgpKS5lYWNoIHsNCiAgICAgICAgaWYgKGl0LmZvcm1UeXBlSWQgPT0gZm9ybURhdGEuZm9ybVR5cGUuaWQpIHsNCiAgICAgICAgICAgIGRlZiBzb3VyY2UgPSBmb3JtRGF0YVNlcnZpY2UuZ2V0TGFzdChpdC5mb3JtVHlwZUlkLCBpdC5raW5kLCBpdC5kZXBhcnRtZW50SWQsIGZvcm1EYXRhLnJlcG9ydFBlcmlvZElkLCBmb3JtRGF0YS5wZXJpb2RPcmRlciwgZm9ybURhdGEuY29tcGFyYXRpdmVQZXJpb2RJZCwgZm9ybURhdGEuYWNjcnVpbmcpDQogICAgICAgICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgc291cmNlLnN0YXRlID09IFdvcmtmbG93U3RhdGUuQUNDRVBURUQpIHsNCiAgICAgICAgICAgICAgICBkZWYgc291cmNlRGF0YVJvd3MgPSBmb3JtRGF0YVNlcnZpY2UuZ2V0RGF0YVJvd0hlbHBlcihzb3VyY2UpLmFsbENhY2hlZA0KICAgICAgICAgICAgICAgIC8vINC60L7Qv9C40YDQvtCy0LDQvdC40LUg0LTQsNC90L3Ri9GFINC/0L4g0YDQsNC30LTQtdC70LDQvA0KICAgICAgICAgICAgICAgIHNlY3Rpb25zLmVhY2ggeyBzZWN0aW9uIC0+DQogICAgICAgICAgICAgICAgICAgIGNvcHlSb3dzKHNvdXJjZURhdGFSb3dzLCBkYXRhUm93cywgJ2hlYWRfJyArIHNlY3Rpb24sICdoZWFkXycgKyAoSW50ZWdlci52YWx1ZU9mKHNlY3Rpb24pICsgMSkpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIGRhdGFSb3dIZWxwZXIuc2V0QWxsQ2FjaGVkKGRhdGFSb3dzKQ0KfQ0KDQovKioNCiAqINCa0L7Qv9C40YDQvtCy0LDRgtGMINC30LDQtNCw0L3QvdGL0Lkg0LTQuNCw0L/QvtC30L7QvSDRgdGC0YDQvtC6INC40Lcg0LjRgdGC0L7Rh9C90LjQutCwINCyINC/0YDQuNC10LzQvdC40LouDQogKg0KICogQHBhcmFtIHNvdXJjZURhdGFSb3dzINGB0YLRgNC+0LrQuCDQuNGB0YLQvtGH0L3QuNC60LANCiAqIEBwYXJhbSBkZXN0aW5hdGlvbkRhdGFSb3dzINGB0YLRgNC+0LrQuCDQv9GA0LjQtdC80L3QuNC60LANCiAqIEBwYXJhbSBmcm9tQWxpYXMg0L/RgdC10LLQtNC+0L3QuNC8INGB0YLRgNC+0LrQuCDRgSDQutC+0YLQvtGA0L7QuSDQutC+0L/QuNGA0L7QstCw0YLRjCDRgdGC0YDQvtC60LggKNCd0JUg0LLQutC70Y7Rh9C40YLQtdC70YzQvdC+KQ0KICogQHBhcmFtIHRvQWxpYXMg0L/RgdC10LLQtNC+0L3QuNC8INGB0YLRgNC+0LrQuCDQtNC+INC60L7RgtC+0YDQvtC5INC60L7Qv9C40YDQvtCy0LDRgtGMINGB0YLRgNC+0LrQuCAo0J3QlSDQstC60LvRjtGH0LjRgtC10LvRjNC90L4pLA0KICogICAgICDQsiDQv9GA0LjQtdC80L3QuNC6INGB0YLRgNC+0LrQuCDQstGB0YLQsNCy0LvRj9GO0YLRgdGPINC/0LXRgNC10LQg0YHRgtGA0L7QutC+0Lkg0YEg0Y3RgtC40Lwg0L/RgdC10LLQtNC+0L3QuNC80L7QvA0KICovDQp2b2lkIGNvcHlSb3dzKGRlZiBzb3VyY2VEYXRhUm93cywgZGVmIGRlc3RpbmF0aW9uRGF0YVJvd3MsIGRlZiBmcm9tQWxpYXMsIGRlZiB0b0FsaWFzKSB7DQogICAgaWYgKHRvQWxpYXMgPT0gJ2hlYWRfNycpIHsNCiAgICAgICAgdG9BbGlhcyA9ICdtZWdhX3RvdGFsJw0KICAgIH0NCiAgICBkZWYgZnJvbSA9IGdldERhdGFSb3coc291cmNlRGF0YVJvd3MsIGZyb21BbGlhcykuZ2V0SW5kZXgoKQ0KICAgIGRlZiB0byA9ICh0b0FsaWFzICE9ICdoZWFkXzEwJykgPyAoZ2V0RGF0YVJvdyhzb3VyY2VEYXRhUm93cywgdG9BbGlhcykuZ2V0SW5kZXgoKSAtIDEpIDogc291cmNlRGF0YVJvd3Muc2l6ZSgpDQogICAgaWYgKGZyb20gPj0gdG8pIHsNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGRlZiBjb3B5Um93cyA9IHNvdXJjZURhdGFSb3dzLnN1Ykxpc3QoZnJvbSwgdG8pDQogICAgaWYgKHRvQWxpYXMgIT0gJ2hlYWRfMTAnKSB7DQogICAgICAgIGRlc3RpbmF0aW9uRGF0YVJvd3MuYWRkQWxsKGdldERhdGFSb3coZGVzdGluYXRpb25EYXRhUm93cywgdG9BbGlhcykuZ2V0SW5kZXgoKSAtIDEsIGNvcHlSb3dzKQ0KICAgIH0gZWxzZSB7DQogICAgICAgIGRlc3RpbmF0aW9uRGF0YVJvd3MuYWRkQWxsKGNvcHlSb3dzKQ0KICAgIH0NCiAgICAvLyDQv9C+0L/RgNCw0LLQuNGC0Ywg0LjQvdC00LXQutGB0YssINC/0L7RgtC+0LzRgyDRh9GC0L4g0L7QvdC4INC/0L7RgdC70LUg0LLRgdGC0LDQstC60Lgg0L3QtSDQv9C10YDQtdGB0YfQuNGC0YvQstCw0Y7RgtGB0Y8NCiAgICB1cGRhdGVJbmRleGVzKGRlc3RpbmF0aW9uRGF0YVJvd3MpDQp9DQoNCkRhdGFSb3c8Q2VsbD4gZ2V0UGVyaW9kVG90YWxSb3coZGVmIHNlY3Rpb24sIGRlZiBwZXJpb2RJZCkgew0KICAgIGRlZiBuZXdSb3cgPSAoZm9ybURhdGFFdmVudCBpbiBbRm9ybURhdGFFdmVudC5JTVBPUlQsIEZvcm1EYXRhRXZlbnQuSU1QT1JUX1RSQU5TUE9SVF9GSUxFXSkgPyBmb3JtRGF0YS5jcmVhdGVTdG9yZU1lc3NhZ2luZ0RhdGFSb3coKSA6IGZvcm1EYXRhLmNyZWF0ZURhdGFSb3coKQ0KICAgIGRlZiByZWZCb29rVmFsdWUgPSBnZXRSZWZCb29rVmFsdWUoOCwgcGVyaW9kSWQpDQogICAgbmV3Um93LmZpeCA9ICfQmNGC0L7Qs9C+INC30LAgJyArIChyZWZCb29rVmFsdWU/Lk5BTUU/LnN0cmluZ1ZhbHVlID86ICLQs9GA0LDRhNCwIDIg0L3QtSDQt9Cw0LTQsNC90LAiKQ0KICAgIG5ld1Jvdy5zZXRBbGlhcygndG90YWxfJyArIHNlY3Rpb24gKyAnXycgKyByZWZCb29rVmFsdWU/LkNPREU/LnN0cmluZ1ZhbHVlKQ0KICAgIG5ld1Jvdy5nZXRDZWxsKCdmaXgnKS5jb2xTcGFuID0gMg0KICAgIG5ld1Jvdy5nZXRDZWxsKCdzdW1QbHVzJykuY29sU3BhbiA9IDINCiAgICBuZXdSb3cuZ2V0Q2VsbCgnc3VtTmRzUGx1cycpLmNvbFNwYW4gPSAyDQogICAgYWxsQ29sdW1ucy5lYWNoIHsNCiAgICAgICAgbmV3Um93LmdldENlbGwoaXQpLnNldFN0eWxlQWxpYXMoJ9Ca0L7QvdGC0YDQvtC70YzQvdGL0LUg0YHRg9C80LzRiycpDQogICAgfQ0KICAgIHJldHVybiBuZXdSb3cNCn0NCg0KZGVmIGFycmFuZ2VSb3dzKGRhdGFSb3dzKSB7DQogICAgZGVmIHNlY3Rpb25NYXAgPSBbOl0NCiAgICBzZWN0aW9ucy5lYWNoIHsgc2VjdGlvbiAtPg0KICAgICAgICBkZWYgZnJvbUFsaWFzID0gJ2hlYWRfJyArIHNlY3Rpb24NCiAgICAgICAgZGVmIHRvQWxpYXMgPSAnaGVhZF8nICsgKEludGVnZXIudmFsdWVPZihzZWN0aW9uKSArIDEpDQogICAgICAgIGlmICh0b0FsaWFzID09ICdoZWFkXzcnKSB7DQogICAgICAgICAgICB0b0FsaWFzID0gJ21lZ2FfdG90YWwnDQogICAgICAgIH0NCiAgICAgICAgZGVmIGZyb20gPSBnZXREYXRhUm93KGRhdGFSb3dzLCBmcm9tQWxpYXMpLmdldEluZGV4KCkNCiAgICAgICAgZGVmIHRvID0gKHRvQWxpYXMgIT0gJ2hlYWRfMTAnKSA/IChnZXREYXRhUm93KGRhdGFSb3dzLCB0b0FsaWFzKS5nZXRJbmRleCgpIC0gMSkgOiBkYXRhUm93cy5zaXplKCkNCiAgICAgICAgaWYgKGZyb20gPCB0bykgew0KICAgICAgICAgICAgaWYgKHNlY3Rpb25NYXBbc2VjdGlvbl0gPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIHNlY3Rpb25NYXBbc2VjdGlvbl0gPSBbXQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2VjdGlvbk1hcFtzZWN0aW9uXS5hZGRBbGwoZGF0YVJvd3Muc3ViTGlzdChmcm9tLCB0bykpDQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHNlY3Rpb25NYXANCn0NCg0KLy8g0KHQvtGA0YLQuNGA0L7QstC60LAg0LPRgNGD0L/QvyDQuCDRgdGC0YDQvtC6DQp2b2lkIHNvcnRGb3JtRGF0YVJvd3MoZGVmIHNhdmVJbkRCID0gdHJ1ZSkgew0KICAgIGRlZiBkYXRhUm93SGVscGVyID0gZm9ybURhdGFTZXJ2aWNlLmdldERhdGFSb3dIZWxwZXIoZm9ybURhdGEpDQogICAgZGVmIGRhdGFSb3dzID0gZGF0YVJvd0hlbHBlci5hbGxDYWNoZWQNCiAgICBkZWYgY29sdW1ucyA9IHNvcnRDb2x1bW5zICsgKGFsbENvbHVtbnMgLSBzb3J0Q29sdW1ucykNCiAgICAvLyDQodC+0YDRgtC40YDQvtCy0LrQsCAo0LLQvdGD0YLRgNC4INCz0YDRg9C/0L8pDQogICAgcmVmQm9va1NlcnZpY2UuZGF0YVJvd3NEZXJlZmVyZW5jZShsb2dnZXIsIGRhdGFSb3dzLCBmb3JtRGF0YS5nZXRGb3JtQ29sdW1ucygpLmZpbmRBbGwgeyBjb2x1bW5zLmNvbnRhaW5zKGl0LmdldEFsaWFzKCkpfSkNCiAgICBkZWYgbmV3Um93cyA9IFtdDQogICAgZGVmIHRlbXBSb3dzID0gW10NCiAgICBmb3IgKGRlZiByb3cgOiBkYXRhUm93cykgew0KICAgICAgICBpZiAocm93LmdldEFsaWFzKCkgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKCF0ZW1wUm93cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgICAgICAgICBzb3J0Um93cyh0ZW1wUm93cywgY29sdW1ucykNCiAgICAgICAgICAgICAgICBuZXdSb3dzLmFkZEFsbCh0ZW1wUm93cykNCiAgICAgICAgICAgICAgICB0ZW1wUm93cyA9IFtdDQogICAgICAgICAgICB9DQogICAgICAgICAgICBuZXdSb3dzLmFkZChyb3cpDQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICB9DQogICAgICAgIHRlbXBSb3dzLmFkZChyb3cpDQogICAgfQ0KICAgIGlmICghdGVtcFJvd3MuaXNFbXB0eSgpKSB7DQogICAgICAgIHNvcnRSb3dzKHRlbXBSb3dzLCBjb2x1bW5zKQ0KICAgICAgICBuZXdSb3dzLmFkZEFsbCh0ZW1wUm93cykNCiAgICB9DQogICAgZGF0YVJvd0hlbHBlci5zZXRBbGxDYWNoZWQobmV3Um93cykNCg0KICAgIGlmIChzYXZlSW5EQikgew0KICAgICAgICBkYXRhUm93SGVscGVyLnNhdmVTb3J0KCkNCiAgICB9IGVsc2Ugew0KICAgICAgICB1cGRhdGVJbmRleGVzKGRhdGFSb3dzKQ0KICAgIH0NCn0NCg0KQEZpZWxkDQpkZWYgbWVnYVRvdGFsc1BhdHRlcm5zID0gWydzYWxlXzE4JyA6IC/QktCh0JXQk9CeINC/0L4g0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90L7QvNGDINC70LjRgdGC0YMg0LrQvdC40LPQuCDQv9GA0L7QtNCw0LYg0LfQsCAoLiopINC/0L4g0YHRgtCw0LLQutC1IDE4JS8sDQogICAgICAgICAgICAgICAgICAgICAgICAgICdzYWxlXzEwJyA6IC/QktCh0JXQk9CeINC/0L4g0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90L7QvNGDINC70LjRgdGC0YMg0LrQvdC40LPQuCDQv9GA0L7QtNCw0LYg0LfQsCAoLiopINC/0L4g0YHRgtCw0LLQutC1IDEwJS8sDQogICAgICAgICAgICAgICAgICAgICAgICAgICdwdXJjaGFzZScgOiAv0JLQodCV0JPQniDQv9C+INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdC+0LzRgyDQu9C40YHRgtGDINC60L3QuNCz0Lgg0L/QvtC60YPQv9C+0Log0LfQsCAoLiopINC/0L4g0YHRgtCw0LLQutC1IDE4JS9dDQoNCnZvaWQgaW1wb3J0RGF0YSgpIHsNCiAgICBkZWYgdG1wUm93ID0gZm9ybURhdGEuY3JlYXRlRGF0YVJvdygpDQogICAgaW50IENPTFVNTl9DT1VOVCA9IDEwDQogICAgaW50IEhFQURFUl9ST1dfQ09VTlQgPSA0DQogICAgU3RyaW5nIFRBQkxFX1NUQVJUX1ZBTFVFID0gZ2V0Q29sdW1uTmFtZSh0bXBSb3csICdyb3dOdW0nKQ0KICAgIFN0cmluZyBUQUJMRV9FTkRfVkFMVUUgPSBudWxsDQogICAgaW50IElOREVYX0ZPUl9TS0lQID0gMQ0KDQogICAgZGVmIGFsbFZhbHVlcyA9IFtdICAgICAgLy8g0LfQvdCw0YfQtdC90LjRjyDRhNC+0YDQvNGLDQogICAgZGVmIGhlYWRlclZhbHVlcyA9IFtdICAgLy8g0LfQvdCw0YfQtdC90LjRjyDRiNCw0L/QutC4DQogICAgZGVmIHBhcmFtc01hcCA9IFsncm93T2Zmc2V0JzogMCwgJ2NvbE9mZnNldCc6IDBdICAvLyDQvNCw0L/QsCDRgSDQv9Cw0YDQsNC80LXRgtGA0LDQvNC4ICjQvtGC0YHRgtGD0L/RiyDRgdCy0LXRgNGF0YMg0Lgg0YHQu9C10LLQsCkNCg0KICAgIGNoZWNrQW5kUmVhZEZpbGUoSW1wb3J0SW5wdXRTdHJlYW0sIFVwbG9hZEZpbGVOYW1lLCBhbGxWYWx1ZXMsIGhlYWRlclZhbHVlcywgVEFCTEVfU1RBUlRfVkFMVUUsIFRBQkxFX0VORF9WQUxVRSwgSEVBREVSX1JPV19DT1VOVCwgcGFyYW1zTWFwKQ0KDQogICAgLy8g0L/RgNC+0LLQtdGA0LrQsCDRiNCw0L/QutC4DQogICAgY2hlY2tIZWFkZXJYbHMoaGVhZGVyVmFsdWVzLCBDT0xVTU5fQ09VTlQsIEhFQURFUl9ST1dfQ09VTlQsIHRtcFJvdykNCiAgICBpZiAobG9nZ2VyLmNvbnRhaW5zTGV2ZWwoTG9nTGV2ZWwuRVJST1IpKSB7DQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICAvLyDQvtGB0LLQvtCx0L7QttC00LXQvdC40LUg0YDQtdGB0YPRgNGB0L7QsiDQtNC70Y8g0Y3QutC+0L3QvtC80LjQuCDQv9Cw0LzRj9GC0LgNCiAgICBoZWFkZXJWYWx1ZXMuY2xlYXIoKQ0KICAgIGhlYWRlclZhbHVlcyA9IG51bGwNCg0KICAgIGRlZiBmaWxlUm93SW5kZXggPSBwYXJhbXNNYXAucm93T2Zmc2V0DQogICAgZGVmIGNvbE9mZnNldCA9IHBhcmFtc01hcC5jb2xPZmZzZXQNCiAgICBwYXJhbXNNYXAuY2xlYXIoKQ0KICAgIHBhcmFtc01hcCA9IG51bGwNCg0KICAgIC8vINC/0L7Qu9GD0YfQuNGC0Ywg0YHRgtGA0L7QutC4INC40Lcg0YjQsNCx0LvQvtC90LANCiAgICBkZWYgZm9ybVRlbXBsYXRlID0gZm9ybURhdGFTZXJ2aWNlLmdldEZvcm1UZW1wbGF0ZShmb3JtRGF0YS5mb3JtVHlwZS5pZCwgZm9ybURhdGEucmVwb3J0UGVyaW9kSWQpDQogICAgZGVmIHRlbXBsYXRlUm93cyA9IGZvcm1UZW1wbGF0ZS5yb3dzDQogICAgZGVmIHZhbHVlc1RvdGFsID0gWyBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfMScpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfMicpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfMycpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfNCcpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfNScpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfNicpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfNycpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfOCcpPy5maXgsDQogICAgICAgICAgICAgICAgICAgICAgICBnZXREYXRhUm93KHRlbXBsYXRlUm93cywgJ2hlYWRfOScpPy5maXgNCiAgICBdDQoNCiAgICBkZWYgcm93SW5kZXggPSAwDQogICAgZGVmIGFsbFZhbHVlc0NvdW50ID0gYWxsVmFsdWVzLnNpemUoKQ0KICAgIGRlZiBzZWN0aW9uTWFwID0gWzpdDQogICAgZGVmIHJvd3MgPSBbXQ0KICAgIGRlZiBzZWN0aW9uSW5kZXggPSBudWxsDQoNCiAgICAvLyDRhNC+0YDQvNC40YDQstCw0L3QuNC1INGB0YLRgNC+0Log0L3RhA0KICAgIGZvciAoZGVmIGkgPSAwOyBpIDwgYWxsVmFsdWVzQ291bnQ7IGkrKykgew0KICAgICAgICByb3dWYWx1ZXMgPSBhbGxWYWx1ZXNbMF0NCiAgICAgICAgZmlsZVJvd0luZGV4KysNCg0KICAgICAgICAvLyDQstGB0LUg0YHRgtGA0L7QutC4INC/0YPRgdGC0YvQtSAtINCy0YvRhdC+0LQNCiAgICAgICAgaWYgKCFyb3dWYWx1ZXMpIHsNCiAgICAgICAgICAgIGFsbFZhbHVlcy5yZW1vdmUocm93VmFsdWVzKQ0KICAgICAgICAgICAgcm93VmFsdWVzLmNsZWFyKCkNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgIH0NCg0KICAgICAgICAvLyDQn9GA0L7Qv9GD0YHQuiDQuNGC0L7Qs9C+0LLRi9GFINGB0YLRgNC+0LoNCiAgICAgICAgLy8g0LXRgdC70Lgg0Y3RgtC+INC90LDRh9Cw0LvQviDRgNCw0LfQtNC10LvQsCwg0YLQviDQt9Cw0L/QvtC80L3QuNGC0Ywg0LXQs9C+INC90LDQt9Cy0LDQvdC40LUg0Lgg0L7QsdGA0LDQsdCw0YLRi9Cy0LDRgtGMINGB0LvQtdC00YPRjtGJ0YPRjiDRgdGC0YDQvtC60YMNCiAgICAgICAgU3RyaW5nIGZpcnN0VmFsdWUgPSByb3dWYWx1ZXNbSU5ERVhfRk9SX1NLSVBdDQogICAgICAgIGlmICh2YWx1ZXNUb3RhbC5jb250YWlucyhmaXJzdFZhbHVlKSkgew0KICAgICAgICAgICAgZGVmIHByZXZTZWN0aW9uSW5kZXggPSBzZWN0aW9uSW5kZXgNCiAgICAgICAgICAgIHNlY3Rpb25JbmRleCA9IGZpcnN0VmFsdWVbMF0NCiAgICAgICAgICAgIGlmIChwcmV2U2VjdGlvbkluZGV4ICE9IG51bGwgJiYgKEludGVnZXIudmFsdWVPZihwcmV2U2VjdGlvbkluZGV4KSArIDEgIT0gSW50ZWdlci52YWx1ZU9mKHNlY3Rpb25JbmRleCkpKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oItCh0YLRgNC+0LrQsCAlZDog0KHRgtGA0YPQutGC0YPRgNCwINGE0LDQudC70LAg0L3QtSDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0LXRgiDQvNCw0LrQtdGC0YMg0L3QsNC70L7Qs9C+0LLQvtC5INGE0L7RgNC80YsiLCBmaWxlUm93SW5kZXgpDQogICAgICAgICAgICB9DQogICAgICAgICAgICBzZWN0aW9uTWFwLnB1dChzZWN0aW9uSW5kZXgsIFtdKQ0KICAgICAgICAgICAgcm93cy5hZGQoZ2V0RGF0YVJvdyh0ZW1wbGF0ZVJvd3MsICdoZWFkXycgKyBzZWN0aW9uSW5kZXgpKQ0KICAgICAgICAgICAgYWxsVmFsdWVzLnJlbW92ZShyb3dWYWx1ZXMpDQogICAgICAgICAgICByb3dWYWx1ZXMuY2xlYXIoKQ0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgfSBlbHNlIGlmIChmaXJzdFZhbHVlLmNvbnRhaW5zKCfQmNGC0L7Qs9C+INC30LAgJykpIHsNCiAgICAgICAgICAgIHJvd0luZGV4KysNCiAgICAgICAgICAgIGRlZiBwZXJpb2ROYW1lID0gZmlyc3RWYWx1ZS5yZXBsYWNlQWxsKCfQmNGC0L7Qs9C+INC30LAgJywgJycpDQogICAgICAgICAgICBkZWYgcGVyaW9kSWQgPSBnZXRSZWNvcmRJZEltcG9ydCg4LCAnTkFNRScsIHBlcmlvZE5hbWUsIGZpbGVSb3dJbmRleCwgMiArIGNvbE9mZnNldCkNCiAgICAgICAgICAgIGRlZiB0b3RhbFBlcmlvZCA9IGdldFBlcmlvZFRvdGFsUm93KHNlY3Rpb25JbmRleCwgcGVyaW9kSWQpDQogICAgICAgICAgICBmaWxsVG90YWxSb3dGcm9tWGxzKHRvdGFsUGVyaW9kLCByb3dWYWx1ZXMsIGNvbE9mZnNldCwgZmlsZVJvd0luZGV4LCByb3dJbmRleCkNCiAgICAgICAgICAgIHJvd3MuYWRkKHRvdGFsUGVyaW9kKQ0KICAgICAgICAgICAgYWxsVmFsdWVzLnJlbW92ZShyb3dWYWx1ZXMpDQogICAgICAgICAgICByb3dWYWx1ZXMuY2xlYXIoKQ0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgfSBlbHNlIGlmIChmaXJzdFZhbHVlID09ICfQktCh0JXQk9CeINC/0L4g0YDQsNC30LTQtdC70LDQvCAxLTYnKSB7DQogICAgICAgICAgICBpZiAoc2VjdGlvbkluZGV4ICE9ICc2Jykgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ2aWNlRXhjZXB0aW9uKCLQodGC0YDQvtC60LAgJWQ6INCh0YLRgNGD0LrRgtGD0YDQsCDRhNCw0LnQu9CwINC90LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0LzQsNC60LXRgtGDINC90LDQu9C+0LPQvtCy0L7QuSDRhNC+0YDQvNGLIiwgZmlsZVJvd0luZGV4KQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVmIHRvdGFsU2VjdGlvbnNfMV82ID0gZ2V0RGF0YVJvdyh0ZW1wbGF0ZVJvd3MsICdtZWdhX3RvdGFsJykNCiAgICAgICAgICAgIGZpbGxUb3RhbFJvd0Zyb21YbHModG90YWxTZWN0aW9uc18xXzYsIHJvd1ZhbHVlcywgY29sT2Zmc2V0LCBmaWxlUm93SW5kZXgsIHJvd0luZGV4KQ0KICAgICAgICAgICAgc2VjdGlvbk1hcFtzZWN0aW9uSW5kZXhdLmFkZCh0b3RhbFNlY3Rpb25zXzFfNikNCiAgICAgICAgICAgIHJvd3MuYWRkKHRvdGFsU2VjdGlvbnNfMV82KQ0KICAgICAgICAgICAgYWxsVmFsdWVzLnJlbW92ZShyb3dWYWx1ZXMpDQogICAgICAgICAgICByb3dWYWx1ZXMuY2xlYXIoKQ0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgfSBlbHNlIGlmIChmaXJzdFZhbHVlLnN0YXJ0c1dpdGgoItCS0KHQldCT0J4g0L/QviDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3QvtC80YMg0LvQuNGB0YLRgyIpKSB7DQogICAgICAgICAgICBpZiAoc2VjdGlvbkluZGV4ICE9ICc3Jykgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ2aWNlRXhjZXB0aW9uKCLQodGC0YDQvtC60LAgJWQ6INCh0YLRgNGD0LrRgtGD0YDQsCDRhNCw0LnQu9CwINC90LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0LzQsNC60LXRgtGDINC90LDQu9C+0LPQvtCy0L7QuSDRhNC+0YDQvNGLIiwgZmlsZVJvd0luZGV4KQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZGVmIGVudHJ5ID0gbWVnYVRvdGFsc1BhdHRlcm5zLmZpbmQgeyBrZXksIHBhdHRlcm4gLT4gZmlyc3RWYWx1ZSA9PX4gcGF0dGVybn0NCiAgICAgICAgICAgIGlmIChlbnRyeSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgZGVmIHBlcmlvZE5hbWUgPSBmaXJzdFZhbHVlLnJlcGxhY2VBbGwoZW50cnkudmFsdWUsICJcJDEiKQ0KICAgICAgICAgICAgICAgIGRlZiBwZXJpb2RJZCA9IGdldFJlY29yZElkSW1wb3J0KDgsICdOQU1FJywgcGVyaW9kTmFtZSwgZmlsZVJvd0luZGV4LCBjb2xJbmRleCArIGNvbE9mZnNldCkNCiAgICAgICAgICAgICAgICBkZWYgdG90YWxQZXJpb2QgPSBnZXRTdXBlclRvdGFsUm93KGVudHJ5LmtleSwgcGVyaW9kSWQpDQogICAgICAgICAgICAgICAgZmlsbFRvdGFsUm93RnJvbVhscyh0b3RhbFBlcmlvZCwgcm93VmFsdWVzLCBjb2xPZmZzZXQsIGZpbGVSb3dJbmRleCwgcm93SW5kZXgpDQogICAgICAgICAgICAgICAgcm93cy5hZGQodG90YWxQZXJpb2QpDQogICAgICAgICAgICB9DQogICAgICAgICAgICBhbGxWYWx1ZXMucmVtb3ZlKHJvd1ZhbHVlcykNCiAgICAgICAgICAgIHJvd1ZhbHVlcy5jbGVhcigpDQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHNlY3Rpb25JbmRleCA9PSBudWxsKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbigi0KHRgtGA0L7QutCwICVkOiDQodGC0YDRg9C60YLRg9GA0LAg0YTQsNC50LvQsCDQvdC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINC80LDQutC10YLRgyDQvdCw0LvQvtCz0L7QstC+0Lkg0YTQvtGA0LzRiyIsIGZpbGVSb3dJbmRleCkNCiAgICAgICAgfQ0KDQogICAgICAgIC8vINC/0YDQvtGB0YLQsNGPINGB0YLRgNC+0LrQsA0KICAgICAgICByb3dJbmRleCsrDQogICAgICAgIGRlZiBuZXdSb3cgPSBnZXROZXdSb3dGcm9tWGxzKHJvd1ZhbHVlcywgY29sT2Zmc2V0LCBmaWxlUm93SW5kZXgsIHJvd0luZGV4LCBJbnRlZ2VyLnZhbHVlT2Yoc2VjdGlvbkluZGV4KSA8IDcpDQogICAgICAgIHNlY3Rpb25NYXBbc2VjdGlvbkluZGV4XS5hZGQobmV3Um93KQ0KICAgICAgICByb3dzLmFkZChuZXdSb3cpDQoNCiAgICAgICAgLy8g0L7RgdCy0L7QsdC+0LTQuNGC0Ywg0L3QtdC90YPQttC90YvQtSDQtNCw0L3QvdGL0LUgLSDQuNC90LDRh9C1INC90LUg0YXQstCw0YLQuNGCINC/0LDQvNGP0YLQuA0KICAgICAgICBhbGxWYWx1ZXMucmVtb3ZlKHJvd1ZhbHVlcykNCiAgICAgICAgcm93VmFsdWVzLmNsZWFyKCkNCiAgICB9DQoNCiAgICBkZWYgbmV3Um93cyA9IChzZWN0aW9uTWFwLnZhbHVlcygpLnN1bSB7IGl0IH0gPzogW10pDQogICAgc2hvd01lc3NhZ2VzKHJvd3MsIGxvZ2dlcikNCiAgICBpZiAobG9nZ2VyLmNvbnRhaW5zTGV2ZWwoTG9nTGV2ZWwuRVJST1IpIHx8IG5ld1Jvd3MgPT0gbnVsbCB8fCBuZXdSb3dzLmlzRW1wdHkoKSkgew0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICB1cGRhdGVJbmRleGVzKHJvd3MpDQoNCiAgICAvLyDRgdGA0LDQstC90LXQvdC40LUg0LjRgtC+0LPQvtCyDQogICAgY29tcGFyZVNwZWNpZmljVG90YWxWYWx1ZXMocm93cywgc2VjdGlvbk1hcCkNCg0KICAgIGlmICghbG9nZ2VyLmNvbnRhaW5zTGV2ZWwoTG9nTGV2ZWwuRVJST1IpKSB7DQogICAgICAgIGZvcm1EYXRhU2VydmljZS5nZXREYXRhUm93SGVscGVyKGZvcm1EYXRhKS5hbGxDYWNoZWQgPSByb3dzDQogICAgfQ0KfQ0KDQovKioNCiAqINCf0YDQvtCy0LXRgNC40YLRjCDRiNCw0L/QutGDINGC0LDQsdC70LjRhtGLDQogKg0KICogQHBhcmFtIGhlYWRlclJvd3Mg0YHRgtGA0L7QutC4INGI0LDQv9C60LgNCiAqIEBwYXJhbSBjb2xDb3VudCDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LvQvtC90L7QuiDQsiDRgtCw0LHQu9C40YbQtQ0KICogQHBhcmFtIHJvd0NvdW50INC60L7Qu9C40YfQtdGB0YLQstC+INGB0YLRgNC+0Log0LIg0YLQsNCx0LvQuNGG0LUNCiAqIEBwYXJhbSB0bXBSb3cg0LLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3QsNGPINGB0YLRgNC+0LrQsCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC90LDQt9Cy0LDQvdC40Lgg0LPRgNCw0YTQvtCyDQogKi8NCnZvaWQgY2hlY2tIZWFkZXJYbHMoZGVmIGhlYWRlclJvd3MsIGRlZiBjb2xDb3VudCwgcm93Q291bnQsIGRlZiB0bXBSb3cpIHsNCiAgICBpZiAoaGVhZGVyUm93cy5pc0VtcHR5KCkpIHsNCiAgICAgICAgdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oV1JPTkdfSEVBREVSX1JPV19TSVpFKQ0KICAgIH0NCiAgICBjaGVja0hlYWRlclNpemUoaGVhZGVyUm93c1swXS5zaXplKCksIGhlYWRlclJvd3Muc2l6ZSgpLCBjb2xDb3VudCwgcm93Q291bnQpDQogICAgZGVmIGhlYWRlck1hcHBpbmcgPSBbDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzBdWzBdKTogZ2V0Q29sdW1uTmFtZSh0bXBSb3csICdyb3dOdW0nKV0pLA0KICAgICAgICAgICAgKFsoaGVhZGVyUm93c1swXVsyXSk6ICfQlNCw0L3QvdGL0LUg0LHRg9GF0LPQsNC70YLQtdGA0YHQutC+0LPQviDRg9GH0ZHRgtCwJ10pLA0KICAgICAgICAgICAgKFsoaGVhZGVyUm93c1swXVs5XSk6IGdldENvbHVtbk5hbWUodG1wUm93LCAncmF0ZU5kcycpXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzBdWzEwXSk6IGdldENvbHVtbk5hbWUodG1wUm93LCAnc3VtJyldKSwNCg0KICAgICAgICAgICAgKFsoaGVhZGVyUm93c1sxXVsyXSk6ICfQktC10LvQuNGH0LjQvdCwINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC4INC90LDQu9C+0LPQvtCy0L7QuSDQsdCw0LfRiyddKSwNCiAgICAgICAgICAgIChbKGhlYWRlclJvd3NbMV1bNl0pOiAn0JLQtdC70LjRh9C40L3QsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQndCU0KEnXSksDQoNCiAgICAgICAgICAgIChbKGhlYWRlclJvd3NbMl1bMl0pOiAn0J3QsNC70L7Qs9C+0LLRi9C5INC/0LXRgNC40L7QtCwg0LfQsCDQutC+0YLQvtGA0YvQuSDQstC90L7RgdC40YLRgdGPINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutCwJ10pLA0KICAgICAgICAgICAgKFsoaGVhZGVyUm93c1syXVszXSk6ICfQvdC+0LzQtdGAINCx0LDQu9Cw0L3RgdC+0LLQvtCz0L4g0YHRh9GR0YLQsCddKSwNCiAgICAgICAgICAgIChbKGhlYWRlclJvd3NbMl1bNF0pOiAn0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoKyknXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzJdWzVdKTogJ9Ch0YPQvNC80LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKC0pJ10pLA0KICAgICAgICAgICAgKFsoaGVhZGVyUm93c1syXVs2XSk6ICfQvdC+0LzQtdGAINCx0LDQu9Cw0L3RgdC+0LLQvtCz0L4g0YHRh9GR0YLQsCddKSwNCiAgICAgICAgICAgIChbKGhlYWRlclJvd3NbMl1bN10pOiAn0KHRg9C80LzQsCDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCAoKyknXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzJdWzhdKTogJ9Ch0YPQvNC80LAg0LrQvtGA0YDQtdC60YLQuNGA0L7QstC60LggKC0pJ10pLA0KDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzBdKTogJzEnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzJdKTogJzInXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzNdKTogJzMnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzRdKTogJzQnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzZdKTogJzUnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzddKTogJzYnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzldKTogJzcnXSksDQogICAgICAgICAgICAoWyhoZWFkZXJSb3dzWzNdWzEwXSk6ICc4J10pDQogICAgXQ0KICAgIGNoZWNrSGVhZGVyRXF1YWxzKGhlYWRlck1hcHBpbmcsIGxvZ2dlcikNCn0NCg0KLyoqDQogKiDQn9C+0LvRg9GH0LjRgtGMINC90L7QstGD0Y4g0YHRgtGA0L7QutGDINC90YQg0L/QviDQt9C90LDRh9C10L3QuNGP0Lwg0LjQtyDRjdC60YHQtdC70Y8uDQogKg0KICogQHBhcmFtIHZhbHVlcyDRgdC/0LjRgdC+0Log0YHRgtGA0L7QuiDRgdC+INC30L3QsNGH0LXQvdC40Y/QvNC4DQogKiBAcGFyYW0gY29sT2Zmc2V0INC+0YLRgdGC0YPQvyDQsiDQutC+0LvQvtC90LrQsNGFDQogKiBAcGFyYW0gZmlsZVJvd0luZGV4INC90L7QvNC10YAg0YHRgtGA0L7QutC4INCyINGC0YQNCiAqIEBwYXJh'
        longString += ''

        addLongText(form_template_id, longString, 'SCRIPT')
        logger.info("К версии макета добавлен скрипт")
    }

} catch (Exception ex) {
    logger.error("Error: ${ex.getLocalizedMessage()}. Все действия, выполненные скриптом, были отменены")
}

def void addTypeTemplate(FormType formType, FormTemplate formTemplate, boolean createType, boolean createTemplate) {
    def form_type_id = formType.id ?: ""
    def form_type_name = formType.name ?: ""
    def form_type_tax_type = formType.taxType.code ?: ""
    def form_type_is_ifrs = formType.isIfrs ? 1 : 0
    def form_type_ifrs_name = formType.ifrsName ?: ""
    def form_type_ifrs_code = formType.code ?: ""

    def form_template_id = formTemplate.id ?: ""
    def form_template_is_fixed_rows = formTemplate.isFixedRows() ? 1 : 0
    def form_template_name = formTemplate.name ?: ""
    def form_template_fullname = formTemplate.fullName ?: ""
    def form_template_version = formTemplate.version.format("dd.MM.yy")
    def form_template_monthly = formTemplate.isMonthly() ? 1 : 0
    def form_template_comparative = formTemplate.isComparative() ? 1 : 0
    def form_template_header = formTemplate.header ?: ""
    def form_template_accruing = formTemplate.isAccruing() ? 1 : 0
    def form_template_updating = formTemplate.isUpdating() ? 1 : 0

    String formTypeSql = "INSERT INTO FORM_TYPE (ID, NAME, TAX_TYPE, STATUS, IS_IFRS, IFRS_NAME, CODE) VALUES " +
            "('$form_type_id', '$form_type_name', '$form_type_tax_type', '0', '$form_type_is_ifrs', '$form_type_ifrs_name', '$form_type_ifrs_code')"
    if (createType) {
        namedParameterJdbcTemplate.update(formTypeSql, [:])
        logger.info("Создан тип НФ с id = $form_type_id без версии макета, колонок, стилей, заголовка, фиксированных строк и скрипта")
    }

    String formTemplateSql = "INSERT INTO FORM_TEMPLATE (ID, TYPE_ID, FIXED_ROWS, NAME, FULLNAME, VERSION, STATUS, MONTHLY, HEADER, COMPARATIVE, ACCRUING, UPDATING) VALUES " +
            "($form_template_id, '$form_type_id', '$form_template_is_fixed_rows', '$form_template_name', '$form_template_fullname', TO_DATE('$form_template_version', 'DD.MM.RR'), '1', '$form_template_monthly', '$form_template_header', '$form_template_comparative', '$form_template_accruing', '$form_template_updating')"
    if (createTemplate) {
        namedParameterJdbcTemplate.update(formTemplateSql, [:])
        logger.info("Создан тип НФ с id = $form_template_id для версии макета с id = $form_type_id, но без колонок, стилей, заголовка, фиксированных строк и скрипта")
    }
}

def void addLongText (def form_template_id, String longString, String alias) {
    final int MAX_LENGTH = 2000
    namedParameterJdbcTemplate.update("UPDATE FORM_TEMPLATE SET $alias = null where id = $form_template_id", [:])
    int start = 0
    longString = new String(longString.decodeBase64(), "UTF-8")
    while (start < longString.length()) {
        int end = (start + MAX_LENGTH) < longString.length() ? (start + MAX_LENGTH) : longString.length()
        String text = longString.substring(start, end)
       namedParameterJdbcTemplate.update('UPDATE FORM_TEMPLATE SET ' + alias + ' = ' + alias + ' || :text where id = ' +form_template_id, ['text' : text])
        start += MAX_LENGTH
    }
}