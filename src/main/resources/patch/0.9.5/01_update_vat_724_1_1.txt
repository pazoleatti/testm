/**
 * https://jira.aplana.com/browse/SBRFACCTAX-15581
 * Скрипт обновления макета id = 848 "(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды".
 * Обновляются столбцы и скрипт макета.
 *
 * # Инструкция:
 * Вставить текст данного скрипта на странице, соответствующей ссылке с окончанием:
 * .../gwtapp/#!scriptExecution
 * Нажать "Выполнить".
 */

try {
    def form_template_id = 848

    // обновление размерности столбцов
    def sql = "UPDATE form_column SET max_length = 19 WHERE form_template_id = 848 AND alias in ('sumPlus', 'sumMinus', 'sumNdsPlus', 'sumNdsMinus', 'sum')"
    namedParameterJdbcTemplate.update(sql, [:])
    logger.info('Обновлены столбцы макета "(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды".')

    // обновление скрипта макета
    longString = ''
    longString += ''

    longString += ''

    longString += ''

    longString += ''

    longString += 'U3RyaW5nKERlcGFydG1lbnRSZXBvcnRQZXJpb2RGaWx0ZXIgZmlsdGVyKSB7DQogICAgaWYgKGZpbHRlciA9PSBudWxsKSB7DQogICAgICAgIHJldHVybiAiIjsNCiAgICB9DQogICAgTGlzdDxTdHJpbmc+IGNhdXNlTGlzdCA9IG5ldyBMaW5rZWRMaXN0PFN0cmluZz4oKTsNCiAgICBpZiAoZmlsdGVyLmlzQ29ycmVjdGlvbigpICE9IG51bGwpIHsNCiAgICAgICAgY2F1c2VMaXN0LmFkZCgiZHJwLmNvcnJlY3Rpb25fZGF0ZSBpcyAiICsgKGZpbHRlci5pc0NvcnJlY3Rpb24oKSA/ICIgbm90ICIgOiAiIikgKyAiIG51bGwiKTsNCiAgICB9DQogICAgaWYgKGZpbHRlci5pc0JhbGFuY2UoKSAhPSBudWxsKSB7DQogICAgICAgIGNhdXNlTGlzdC5hZGQoImRycC5pc19iYWxhbmNlX3BlcmlvZCAiICsgKGZpbHRlci5pc0JhbGFuY2UoKSA/ICI8PiIgOiAiPSIpICsgIiAwIik7DQogICAgfQ0KICAgIGlmIChmaWx0ZXIuaXNBY3RpdmUoKSAhPSBudWxsKSB7DQogICAgICAgIGNhdXNlTGlzdC5hZGQoImRycC5pc19hY3RpdmUgIiArIChmaWx0ZXIuaXNBY3RpdmUoKSA/ICI8PiIgOiAiPSIpICsgIiAwIik7DQogICAgfQ0KICAgIGlmIChmaWx0ZXIuZ2V0Q29ycmVjdGlvbkRhdGUoKSAhPSBudWxsKSB7DQogICAgICAgIGNhdXNlTGlzdC5hZGQoImRycC5jb3JyZWN0aW9uX2RhdGUgPSB0b19kYXRlKCciICsNCiAgICAgICAgICAgICAgICBmaWx0ZXIuZ2V0Q29ycmVjdGlvbkRhdGUoKS5mb3JtYXQoJ2RkLk1NLnl5eXknKSArDQogICAgICAgICAgICAgICAgIicsICdERC5NTS5ZWVlZJykiKTsNCiAgICB9DQogICAgaWYgKGZpbHRlci5nZXREZXBhcnRtZW50SWRMaXN0KCkgIT0gbnVsbCkgew0KICAgICAgICBjYXVzZUxpc3QuYWRkKFNxbFV0aWxzLnRyYW5zZm9ybVRvU3FsSW5TdGF0ZW1lbnQoImRycC5kZXBhcnRtZW50X2lkIiwNCiAgICAgICAgICAgICAgICBmaWx0ZXIuZ2V0RGVwYXJ0bWVudElkTGlzdCgpKSk7DQogICAgfQ0KICAgIGlmIChmaWx0ZXIuZ2V0UmVwb3J0UGVyaW9kSWRMaXN0KCkgIT0gbnVsbCkgew0KICAgICAgICBjYXVzZUxpc3QuYWRkKFNxbFV0aWxzLnRyYW5zZm9ybVRvU3FsSW5TdGF0ZW1lbnQoImRycC5yZXBvcnRfcGVyaW9kX2lkIiwNCiAgICAgICAgICAgICAgICBmaWx0ZXIuZ2V0UmVwb3J0UGVyaW9kSWRMaXN0KCkpKTsNCiAgICB9DQogICAgaWYgKGZpbHRlci5nZXRUYXhUeXBlTGlzdCgpICE9IG51bGwpIHsNCiAgICAgICAgY2F1c2VMaXN0LmFkZCgidHAudGF4X3R5cGUgaW4gIiArDQogICAgICAgICAgICAgICAgU3FsVXRpbHMudHJhbnNmb3JtVGF4VHlwZVRvU3FsSW5TdGF0ZW1lbnQoZmlsdGVyLmdldFRheFR5cGVMaXN0KCkpKTsNCiAgICB9DQogICAgaWYgKGZpbHRlci5nZXRZZWFyU3RhcnQoKSAhPSBudWxsIHx8IGZpbHRlci5nZXRZZWFyRW5kKCkgIT0gbnVsbCl7DQogICAgICAgIGNhdXNlTGlzdC5hZGQoIig6eWVhclN0YXJ0IGlzIG51bGwgb3IgdHAueWVhciA+PSA6eWVhclN0YXJ0KSBhbmQgKDp5ZWFyRW5kIGlzIG51bGwgb3IgdHAueWVhciA8PSA6eWVhckVuZCkiKTsNCiAgICB9DQogICAgaWYgKGNhdXNlTGlzdC5pc0VtcHR5KCkpIHsNCiAgICAgICAgcmV0dXJuICIiOw0KICAgIH0NCiAgICByZXR1cm4gIiB3aGVyZSAiICsgU3RyaW5nVXRpbHMuam9pbihjYXVzZUxpc3QsICIgYW5kICIpOw0KfQ0KDQovLyDQn9GA0LXQtNGA0LDRgdGH0LXRgtC90YvQtSDQv9GA0L7QstC10YDQutC4DQpkZWYgcHJlQ2FsY0NoZWNrKCkgew0KICAgIGRlZiBkYXRhUm93cyA9IGZvcm1EYXRhU2VydmljZS5nZXREYXRhUm93SGVscGVyKGZvcm1EYXRhKS5hbGxDYWNoZWQNCg0KICAgIC8vINCf0YDQtdC00YDQsNGB0YfQtdGC0L3QsNGPINC/0YDQvtCy0LXRgNC60LAgMi4g0J/RgNC+0LLQtdGA0LrQsCDQvdCw0LvQvtCz0L7QstC+0LPQviDQv9C10YDQuNC+0LTQsA0KICAgIGRlZiBlcnJvck51bWJlcnMgPSBbXQ0KICAgIGZvciAoZGVmIHJvdyA6IGRhdGFSb3dzKSB7DQogICAgICAgIGlmIChyb3cuZ2V0QWxpYXMoKSkgew0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgfQ0KICAgICAgICBkZWYgcGVyaW9kTmFtZSA9IGdldFJlZkJvb2tWYWx1ZSg4LCByb3cucGVyaW9kKT8uTkFNRT8udmFsdWUNCiAgICAgICAgaWYgKCFwZXJpb2ROYW1lcy5jb250YWlucyhwZXJpb2ROYW1lKSkgew0KICAgICAgICAgICAgZXJyb3JOdW1iZXJzLmFkZChyb3cuZ2V0SW5kZXgoKSkNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoIWVycm9yTnVtYmVycy5pc0VtcHR5KCkpIHsNCiAgICAgICAgbG9nZ2VyLmVycm9yKCLQodGC0YDQvtC60LggJXM6INCT0YDQsNGE0LAgwqslc8K7INC30LDQv9C+0LvQvdC10L3QsCDQvdC10LLQtdGA0L3QviEg0JLQvtC30LzQvtC20L3Ri9C1INC30L3QsNGH0LXQvdC40Y86IMKrJXPCuy4iLA0KICAgICAgICAgICAgICAgIGVycm9yTnVtYmVycy5qb2luKCcsICcpLCBnZXRDb2x1bW5OYW1lKGRhdGFSb3dzWzBdLCAncGVyaW9kJyksIHBlcmlvZE5hbWVzLmpvaW4oJ8K7LCDCqycpKQ0KICAgIH0NCn0NCg0KZGVmIGNoZWNrT3ZlcmZsb3coQmlnRGVjaW1hbCB2YWx1ZSwgaW50IHNpemUpIHsNCiAgICBpZiAodmFsdWUgPT0gbnVsbCkgew0KICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0NCiAgICBCaWdEZWNpbWFsIG92ZXJwb3dlciA9IG5ldyBCaWdEZWNpbWFsKCIxRSIgKyBzaXplKQ0KICAgIGlmICh2YWx1ZS5hYnMoKS5jb21wYXJlVG8ob3ZlcnBvd2VyKSAhPSAtMSkgew0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICB9DQogICAgcmV0dXJuIHRydWUNCn0NCg0KQEZpZWxkDQpkZWYgcmVwb3J0UGVyaW9kTWFwID0gWzpdDQoNCmRlZiBnZXRSZXBvcnRQZXJpb2QoZGVmIGlkKSB7DQogICAgaWYgKHJlcG9ydFBlcmlvZE1hcFtpZF0gPT0gbnVsbCkgew0KICAgICAgICByZXBvcnRQZXJpb2RNYXBbaWRdID0gcmVwb3J0UGVyaW9kU2VydmljZS5nZXQoaWQpDQogICAgfQ0KICAgIHJldHVybiByZXBvcnRQZXJpb2RNYXBbaWRdDQp9DQoNCkBGaWVsZA0KZGVmIGRlcGFydG1lbnRSZXBvcnRQZXJpb2RNYXAgPSBbOl0NCg0KRGVwYXJ0bWVudFJlcG9ydFBlcmlvZCBnZXREZXBhcnRtZW50UmVwb3J0UGVyaW9kKGRlZiBpZCkgew0KICAgIGlmIChkZXBhcnRtZW50UmVwb3J0UGVyaW9kTWFwW2lkXSA9PSBudWxsKSB7DQogICAgICAgIGRlcGFydG1lbnRSZXBvcnRQZXJpb2RNYXBbaWRdID0gZGVwYXJ0bWVudFJlcG9ydFBlcmlvZFNlcnZpY2UuZ2V0KGlkKQ0KICAgIH0NCiAgICByZXR1cm4gZGVwYXJ0bWVudFJlcG9ydFBlcmlvZE1hcFtpZF0NCn0='

    addLongText(form_template_id, longString, 'SCRIPT')
    logger.info('Обновлен скрипт макета "(724.1.1) Корректировка сумм НДС и налоговых вычетов за прошедшие налоговые периоды".')

} catch (Exception ex) {
    logger.error("Error: ${ex.getLocalizedMessage()}. Все действия, выполненные скриптом, были отменены")
}

def void addLongText(def form_template_id, String longString, String alias) {
    final int MAX_LENGTH = 2000
    namedParameterJdbcTemplate.update("UPDATE FORM_TEMPLATE SET $alias = null where id = $form_template_id", [:])
    int start = 0
    longString = new String(longString.decodeBase64(), "UTF-8")
    while (start < longString.length()) {
        int end = (start + MAX_LENGTH) < longString.length() ? (start + MAX_LENGTH) : longString.length()
        String text = longString.substring(start, end)
        namedParameterJdbcTemplate.update('UPDATE FORM_TEMPLATE SET ' + alias + ' = ' + alias + ' || :text where id = ' +form_template_id, ['text' : text])
        start += MAX_LENGTH
    }
}