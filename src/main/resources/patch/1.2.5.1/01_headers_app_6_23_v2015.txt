import com.aplana.sbrf.taxaccounting.model.Column
import com.aplana.sbrf.taxaccounting.model.ColumnType
import com.aplana.sbrf.taxaccounting.model.FormStyle
import com.aplana.sbrf.taxaccounting.model.FormTemplate
import com.aplana.sbrf.taxaccounting.model.FormType
import org.apache.commons.io.IOUtils

/**
 Обновляет скрипт и заголовок макета 6.23
 # Инструкция:
 Вставить текст данного скрипта на странице, соответствующей ссылке с окончанием:
 .../gwtapp/#!scriptExecution
 Нажать "Выполнить".

 */

boolean createType = false
boolean createTemplate = false
boolean addColumns = false
boolean addStyles = false
boolean addDataRows = false
boolean addDataHeaders = true
boolean addScript = true

try {
    // id типа формы, имя типа формы, вид налога(I, T, V, D, P, E, M), включать в ИФРС(флаг), имя ИФРС
    FormType formType = new FormType()
    formType.setId(832)
    formType.setName('6.23. Отчет в отношении прочих доходов ПАО Сбербанк, связанных с оказанием услуг')
    formType.setTaxType(TaxType.DEAL)
    formType.setIsIfrs(false)
    formType.setIfrsName('')
    formType.setCode('')
    // id шаблона формы, имя шаблона короткое, имя шаблона полное, год версии, ежемесячность(флаг), код
    FormTemplate formTemplate = new FormTemplate()
    formTemplate.setId(832)
    formTemplate.setFixedRows(false)
    formTemplate.setName('6.23. Оказание услуг (прочие доходы)')
    formTemplate.setFullName('6.23. Отчет в отношении прочих доходов ПАО Сбербанк, связанных с оказанием услуг')
    formTemplate.setVersion(Date.parse('dd.MM.yyyy', '01.01.2015'))
    formTemplate.setMonthly(false)
    formTemplate.setHeader('')
    formTemplate.setComparative(false)
    formTemplate.setAccruing(false)
    formTemplate.setUpdating(false)

    def form_type_id = formType.id
    def form_template_id = formTemplate.id

    def rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from FORM_TYPE where id = $form_type_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Макет НФ с данным id = $form_type_id уже существует в системе!")
        if (createType) {
            return
        }
    }

    rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from FORM_TEMPLATE where id = $form_template_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Версия макета НФ с данным id = $form_template_id уже существует в системе!")
        if (createTemplate) {
            return
        }
    }

    String longString = ''

    longString = ''
    if (addDataHeaders) {
        longString += 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxyb3dzPg0KICAgIDxyb3cgYWxpYXM9IiI+DQogICAgICAgIDxjZWxsIGFsaWFzPSJyb3dOdW1iZXIiIGNvbFNwYW49IjQiIHJvd1NwYW49IjEiIHZhbHVlPSLQntCx0YnQsNGPINC40L3RhNC+0YDQvNCw0YbQuNGPIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJuYW1lIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0J7QsdGJ0LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iaWtzciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCe0LHRidCw0Y8g0LjQvdGE0L7RgNC80LDRhtC40Y8iLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImNvdW50cnlDb2RlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0J7QsdGJ0LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0ic3VtIiBjb2xTcGFuPSI3IiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHQstC10LTQtdC90LjRjyDQviDRgdC00LXQu9C60LUiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImRvY051bWJlciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0LLQtdC00LXQvdC40Y8g0L4g0YHQtNC10LvQutC1Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJkb2NEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHQstC10LTQtdC90LjRjyDQviDRgdC00LXQu9C60LUiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9InNlcnZpY2VUeXBlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHQstC10LTQtdC90LjRjyDQviDRgdC00LXQu9C60LUiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9InByaWNlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHQstC10LTQtdC90LjRjyDQviDRgdC00LXQu9C60LUiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImNvc3QiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQodCy0LXQtNC10L3QuNGPINC+INGB0LTQtdC70LrQtSIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iZGVhbERvbmVEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0KHQstC10LTQtdC90LjRjyDQviDRgdC00LXQu9C60LUiLz4NCiAgICA8L3Jvdz4NCiAgICA8cm93IGFsaWFzPSIiPg0KICAgICAgICA8Y2VsbCBhbGlhcz0icm93TnVtYmVyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIyIiB2YWx1ZT0i4oSWINC/L9C/Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJuYW1lIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIyIiB2YWx1ZT0i0J/QvtC70L3QvtC1INC90LDQuNC80LXQvdC+0LLQsNC90LjQtSDRjtGA0LjQtNC40YfQtdGB0LrQvtCz0L4g0LvQuNGG0LAg0YEg0YPQutCw0LfQsNC90LjQtdC8INCe0J/QpCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iaWtzciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMiIgdmFsdWU9ItCY0J3QnS8g0JrQmNCeIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJjb3VudHJ5Q29kZSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMiIgdmFsdWU9ItCa0L7QtCDRgdGC0YDQsNC90Ysg0L/QviDQutC70LDRgdGB0LjRhNC40LrQsNGC0L7RgNGDINCe0JrQodCcIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJzdW0iIGNvbFNwYW49IjEiIHJvd1NwYW49IjIiIHZhbHVlPSLQodGD0LzQvNCwINC00L7RhdC+0LTQvtCyINCR0LDQvdC60LAsINGA0YPQsS4iLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImRvY051bWJlciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMiIgdmFsdWU9ItCd0L7QvNC10YAg0LTQvtCz0L7QstC+0YDQsCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iZG9jRGF0ZSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMiIgdmFsdWU9ItCU0LDRgtCwINC00L7Qs9C+0LLQvtGA0LAiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9InNlcnZpY2VUeXBlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIyIiB2YWx1ZT0i0JLQuNC0INGD0YHQu9GD0LMiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9InByaWNlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIyIiB2YWx1ZT0i0KbQtdC90LAiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImNvc3QiIGNvbFNwYW49IjEiIHJvd1NwYW49IjIiIHZhbHVlPSLQodGC0L7QuNC80L7RgdGC0YwiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImRlYWxEb25lRGF0ZSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMiIgdmFsdWU9ItCU0LDRgtCwINGB0L7QstC10YDRiNC10L3QuNGPINGB0LTQtdC70LrQuCIvPg0KICAgIDwvcm93Pg0KICAgIDxyb3cgYWxpYXM9IiI+DQogICAgICAgIDxjZWxsIGFsaWFzPSJyb3dOdW1iZXIiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLihJYg0L8v0L8iLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9Im5hbWUiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQn9C+0LvQvdC+0LUg0L3QsNC40LzQtdC90L7QstCw0L3QuNC1INGO0YDQuNC00LjRh9C10YHQutC+0LPQviDQu9C40YbQsCDRgSDRg9C60LDQt9Cw0L3QuNC10Lwg0J7Qn9CkIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJpa3NyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JjQndCdLyDQmtCY0J4iLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImNvdW50cnlDb2RlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JrQvtC0INGB0YLRgNCw0L3RiyDQv9C+INC60LvQsNGB0YHQuNGE0LjQutCw0YLQvtGA0YMg0J7QmtCh0JwiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9InN1bSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0YPQvNC80LAg0LTQvtGF0L7QtNC+0LIg0JHQsNC90LrQsCwg0YDRg9CxLiIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iZG9jTnVtYmVyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0J3QvtC80LXRgCDQtNC+0LPQvtCy0L7RgNCwIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJkb2NEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JTQsNGC0LAg0LTQvtCz0L7QstC+0YDQsCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0ic2VydmljZVR5cGUiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQktC40LQg0YPRgdC70YPQsyIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0icHJpY2UiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQptC10L3QsCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iY29zdCIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCh0YLQvtC40LzQvtGB0YLRjCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iZGVhbERvbmVEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0JTQsNGC0LAg0YHQvtCy0LXRgNGI0LXQvdC40Y8g0YHQtNC10LvQutC4Ii8+DQogICAgPC9yb3c+DQogICAgPHJvdyBhbGlhcz0iIj4NCiAgICAgICAgPGNlbGwgYWxpYXM9InJvd051bWJlciIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCz0YAuIDEiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9Im5hbWUiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiAyIi8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJpa3NyIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0LPRgC4gMyIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iY291bnRyeUNvZGUiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiA0Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJzdW0iIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiA1Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJkb2NOdW1iZXIiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiA2Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJkb2NEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0LPRgC4gNyIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0ic2VydmljZVR5cGUiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiA4Ii8+DQogICAgICAgIDxjZWxsIGFsaWFzPSJwcmljZSIgY29sU3Bhbj0iMSIgcm93U3Bhbj0iMSIgdmFsdWU9ItCz0YAuIDkiLz4NCiAgICAgICAgPGNlbGwgYWxpYXM9ImNvc3QiIGNvbFNwYW49IjEiIHJvd1NwYW49IjEiIHZhbHVlPSLQs9GALiAxMCIvPg0KICAgICAgICA8Y2VsbCBhbGlhcz0iZGVhbERvbmVEYXRlIiBjb2xTcGFuPSIxIiByb3dTcGFuPSIxIiB2YWx1ZT0i0LPRgC4gMTEiLz4NCiAgICA8L3Jvdz4NCjwvcm93cz4='

        addLongText(form_template_id, longString, 'DATA_HEADERS')
        logger.info("К версии макета добавлен заголовок")
    }

    longString = ''
    if (addScript) {
        longString += ''
        longString += 'dXJlKHJvd0NlbGxzWzExXSksICJkZC5NTS55eXl5IiwgZmlsZVJvd0luZGV4LCAxMSArIGNvbE9mZnNldCwgbG9nZ2VyLCB0cnVlKQ0KICAgICAgICAvLyDQs9GA0LDRhNCwIDkNCiAgICAgICAgbmV3Um93LnByaWNlID0gcGFyc2VOdW1iZXIocHVyZShyb3dDZWxsc1s5XSksIGZpbGVSb3dJbmRleCwgOSArIGNvbE9mZnNldCwgbG9nZ2VyLCB0cnVlKQ0KICAgIH0NCiAgICAvLyDQs9GA0LDRhNCwIDUNCiAgICBuZXdSb3cuc3VtID0gcGFyc2VOdW1iZXIocHVyZShyb3dDZWxsc1s1XSksIGZpbGVSb3dJbmRleCwgNSArIGNvbE9mZnNldCwgbG9nZ2VyLCB0cnVlKQ0KICAgIC8vINCz0YDQsNGE0LAgMTANCiAgICBuZXdSb3cuY29zdCA9IHBhcnNlTnVtYmVyKHB1cmUocm93Q2VsbHNbMTBdKSwgZmlsZVJvd0luZGV4LCAxMCArIGNvbE9mZnNldCwgbG9nZ2VyLCB0cnVlKQ0KDQogICAgcmV0dXJuIG5ld1Jvdw0KfQ0KDQpTdHJpbmcgcHVyZShTdHJpbmcgY2VsbCkgew0KICAgIHJldHVybiBTdHJpbmdVdGlscy5jbGVhblN0cmluZyhjZWxsKT8uaW50ZXJuKCkNCn0NCg0KLy8g0KHQvtGA0YLQuNGA0L7QstC60LAg0LPRgNGD0L/QvyDQuCDRgdGC0YDQvtC6DQp2b2lkIHNvcnRGb3JtRGF0YVJvd3MoZGVmIHNhdmVJbkRCID0gdHJ1ZSkgew0KICAgIGRlZiBkYXRhUm93SGVscGVyID0gZm9ybURhdGFTZXJ2aWNlLmdldERhdGFSb3dIZWxwZXIoZm9ybURhdGEpDQogICAgZGVmIGRhdGFSb3dzID0gZGF0YVJvd0hlbHBlci5hbGxDYWNoZWQNCiAgICBzb3J0Um93cyhyZWZCb29rU2VydmljZSwgbG9nZ2VyLCBkYXRhUm93cywgbnVsbCwgbnVsbCwgbnVsbCkNCiAgICBpZiAoc2F2ZUluREIpIHsNCiAgICAgICAgZGF0YVJvd0hlbHBlci5zYXZlU29ydCgpDQogICAgfSBlbHNlIHsNCiAgICAgICAgdXBkYXRlSW5kZXhlcyhkYXRhUm93cykNCiAgICB9DQp9DQoNCnZvaWQgYWZ0ZXJMb2FkKCkgew0KICAgIGlmIChiaW5kaW5nLnZhcmlhYmxlcy5jb250YWluc0tleSgic3BlY2lhbFBlcmlvZCIpKSB7DQogICAgICAgIC8vINC40LzRjyDQv9C10YDQuNC+0LTQsCDQuCDQutC+0L3QtdGH0L3QsNGPINC00LDRgtCwINC60L7RgNGA0LXQutGC0L3Riw0KICAgICAgICAvLyDRg9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNCw0YLRgyDQtNC70Y8g0YHQv9GA0LDQstC+0YfQvdC40LrQvtCyDQogICAgICAgIHNwZWNpYWxQZXJpb2QuY2FsZW5kYXJTdGFydERhdGUgPSByZXBvcnRQZXJpb2RTZXJ2aWNlLmdldFN0YXJ0RGF0ZShmb3JtRGF0YS5yZXBvcnRQZXJpb2RJZCkudGltZQ0KICAgIH0NCn0='

        addLongText(form_template_id, longString, 'SCRIPT')
        logger.info("К версии макета добавлен скрипт")
    }

} catch (Exception ex) {
    logger.error("Error: ${ex.getLocalizedMessage()}. Все действия, выполненные скриптом, были отменены")
}

def void addLongText (def form_template_id, String longString, String alias) {
    final int MAX_LENGTH = 2000
    namedParameterJdbcTemplate.update("UPDATE FORM_TEMPLATE SET $alias = null where id = $form_template_id", [:])
    int start = 0
    longString = new String(longString.decodeBase64(), "UTF-8")
    while (start < longString.length()) {
        int end = (start + MAX_LENGTH) < longString.length() ? (start + MAX_LENGTH) : longString.length()
        String text = longString.substring(start, end)
       namedParameterJdbcTemplate.update('UPDATE FORM_TEMPLATE SET ' + alias + ' = ' + alias + ' || :text where id = ' +form_template_id, ['text' : text])
        start += MAX_LENGTH
    }
}