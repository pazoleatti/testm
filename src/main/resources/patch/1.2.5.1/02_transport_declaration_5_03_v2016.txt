import com.aplana.sbrf.taxaccounting.model.DeclarationTemplate
import com.aplana.sbrf.taxaccounting.model.DeclarationType
import org.apache.commons.io.IOUtils

/**
 * Создает макет декларации.
 *
 * # Инструкция:
 * Вставить текст данного скрипта на странице, соответствующей ссылке с окончанием:
 * .../gwtapp/#!scriptExecution
 * Нажать "Выполнить".
 */

boolean createType = true
boolean createTemplate = true
boolean addScript = true

try {
    // тип
    DeclarationType type = new DeclarationType()
    type.setId(31)
    type.setName('Декларация по транспортному налогу 5.03')
    type.setTaxType(TaxType.TRANSPORT)
    type.setIsIfrs(false)
    type.setIfrsName('')
    // макет
    DeclarationTemplate template = new DeclarationTemplate()
    template.setId(1031)
    template.setName('Декларация по транспортному налогу 5.03')
    template.setVersion(Date.parse('dd.MM.yyyy', '01.01.2016'))

    def type_id = type.id
    def template_id = template.id

    def rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from DECLARATION_TYPE where id = $type_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Макет декларации с данным id = $type_id уже существует в системе!")
        if (createType) {
            return
        }
    }

    rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from DECLARATION_TEMPLATE where id = $template_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Версия макета декларации с данным id = $template_id уже существует в системе!")
        if (createTemplate) {
            return
        }
    }

    addTypeTemplate(type, template, createType, createTemplate)

    String longString = ''
    if (addScript) {
        longString += ''
        longString += 'KQ0KICAgICAgICB9DQogICAgfQ0KICAgIGlmIChyZWNvcmQuU0lHTkFUT1JZX0lEPy5yZWZlcmVuY2VWYWx1ZSA9PSBudWxsKSB7DQogICAgICAgIGVycm9yTGlzdC5hZGQoIsKr0J/RgNC40LfQvdCw0Log0LvQuNGG0LAg0L/QvtC00L/QuNGB0LDQstGI0LXQs9C+INC00L7QutGD0LzQtdC90YLCuyIpDQogICAgfQ0KICAgIGlmIChyZWNvcmQuU0lHTkFUT1JZX1NVUk5BTUU/LnN0cmluZ1ZhbHVlID09IG51bGwgfHwgcmVjb3JkLlNJR05BVE9SWV9TVVJOQU1FLnN0cmluZ1ZhbHVlLmlzRW1wdHkoKSkgew0KICAgICAgICBlcnJvckxpc3QuYWRkKCLCq9Ck0LDQvNC40LvQuNGPINC/0L7QtNC/0LjRgdCw0L3RgtCwwrsiKQ0KICAgIH0NCiAgICBpZiAocmVjb3JkLlNJR05BVE9SWV9GSVJTVE5BTUU/LnN0cmluZ1ZhbHVlID09IG51bGwgfHwgcmVjb3JkLlNJR05BVE9SWV9GSVJTVE5BTUUuc3RyaW5nVmFsdWUuaXNFbXB0eSgpKSB7DQogICAgICAgIGVycm9yTGlzdC5hZGQoIsKr0JjQvNGPINC/0L7QtNC/0LjRgdCw0L3RgtCwwrsiKQ0KICAgIH0NCiAgICBkZWYgc2lnbmF0b3J5SWQgPSBnZXRSZWZCb29rVmFsdWUoMzVMLCByZWNvcmQ/LlNJR05BVE9SWV9JRD8ucmVmZXJlbmNlVmFsdWUpPy5DT0RFPy5udW1iZXJWYWx1ZQ0KICAgIGlmIChzaWduYXRvcnlJZCAhPSBudWxsICYmIHNpZ25hdG9yeUlkICE9IDEpIHsNCiAgICAgICAgaWYgKHJlY29yZC5BUFBST1ZFX0RPQ19OQU1FPy5zdHJpbmdWYWx1ZSA9PSBudWxsIHx8IHJlY29yZC5BUFBST1ZFX0RPQ19OQU1FLnN0cmluZ1ZhbHVlLmlzRW1wdHkoKSkgew0KICAgICAgICAgICAgZXJyb3JMaXN0LmFkZCgiwqvQndCw0LjQvNC10L3QvtCy0LDQvdC40LUg0LTQvtC60YPQvNC10L3RgtCwLCDQv9C+0LTRgtCy0LXRgNC20LTQsNGO0YnQtdCz0L4g0L/QvtC70L3QvtC80L7Rh9C40Y8g0L/RgNC10LTRgdGC0LDQstC40YLQtdC70Y/CuyIpDQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKHJlY29yZC5UQVhfT1JHQU5fQ09ERV9QUk9NPy52YWx1ZSA9PSBudWxsIHx8IHJlY29yZC5UQVhfT1JHQU5fQ09ERV9QUk9NLnZhbHVlLmlzRW1wdHkoKSkgew0KICAgICAgICBlcnJvckxpc3QuYWRkKCLCq9Ca0L7QtCDQvdCw0LvQvtCz0L7QstC+0LPQviDQvtGA0LPQsNC90LAgKNC/0YDQvtC8LinCuyIpDQogICAgfQ0KICAgIGVycm9yTGlzdA0KfQ0KDQpMaXN0PFN0cmluZz4gZ2V0RXJyb3JUYXhQbGFjZVR5cGVDb2RlKGRlZiByZWNvcmQpIHsNCiAgICBMaXN0PFN0cmluZz4gZXJyb3JMaXN0ID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCkNCiAgICBkZWYgY29kZSA9IHJlY29yZC5UQVhfUExBQ0VfVFlQRV9DT0RFPy5yZWZlcmVuY2VWYWx1ZQ0KICAgIGlmIChjb2RlID09IG51bGwgfHwgIShnZXRSZWZCb29rVmFsdWUoMkwsIGNvZGUpPy5DT0RFPy5zdHJpbmdWYWx1ZSBpbiBbJzIxMycsICcyMTYnLCAnMjYwJ10pKSB7DQogICAgICAgIGVycm9yTGlzdC5hZGQoIsKr0JrQvtC0INC80LXRgdGC0LAsINC/0L4g0LrQvtGC0L7RgNC+0LzRgyDQv9GA0LXQtNGB0YLQsNCy0LvRj9C10YLRgdGPINC00L7QutGD0LzQtdC90YLCuyIpDQogICAgfQ0KICAgIGVycm9yTGlzdA0KfQ0KDQpMaXN0PFN0cmluZz4gZ2V0RXJyb3JJTk4ocmVjb3JkKSB7DQogICAgTGlzdDxTdHJpbmc+IGVycm9yTGlzdCA9IG5ldyBBcnJheUxpc3Q8U3RyaW5nPigpDQogICAgaWYgKHJlY29yZC5JTk4gPT0gbnVsbCB8fCByZWNvcmQuSU5OLnN0cmluZ1ZhbHVlID09IG51bGwgfHwgcmVjb3JkLklOTi5zdHJpbmdWYWx1ZS5pc0VtcHR5KCkpIHsNCiAgICAgICAgZXJyb3JMaXN0LmFkZCgiwqvQmNCd0J3CuyIpDQogICAgfQ0KICAgIGVycm9yTGlzdA0KfQ0KDQovLyDQn9C+0LvRg9GH0LjRgtGMINC/0LDRgNCw0LzQtdGC0YDRiyDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyAo0LjQtyDRgdC/0YDQsNCy0L7Rh9C90LjQutCwIDMxKQ0KZGVmIGdldERlcGFydG1lbnRQYXJhbSgpIHsNCiAgICBpZiAoZGVwYXJ0bWVudFBhcmFtID09IG51bGwpIHsNCiAgICAgICAgZGVmIGRlcGFydG1lbnRJZCA9IGRlY2xhcmF0aW9uRGF0YS5kZXBhcnRtZW50SWQNCiAgICAgICAgZGVmIGRlcGFydG1lbnRQYXJhbUxpc3QgPSBnZXRQcm92aWRlcigzMUwpLmdldFJlY29yZHMoZ2V0UmVwb3J0UGVyaW9kRW5kRGF0ZSgpIC0gMSwgbnVsbCwgIkRFUEFSVE1FTlRfSUQgPSAkZGVwYXJ0bWVudElkIiwgbnVsbCkNCiAgICAgICAgaWYgKGRlcGFydG1lbnRQYXJhbUxpc3QgPT0gbnVsbCB8fCBkZXBhcnRtZW50UGFyYW1MaXN0LnNpemUoKSA9PSAwIHx8IGRlcGFydG1lbnRQYXJhbUxpc3QuZ2V0KDApID09IG51bGwpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oItCe0YjQuNCx0LrQsCDQv9GA0Lgg0L/QvtC70YPRh9C10L3QuNC4INC90LDRgdGC0YDQvtC10Log0L7QsdC+0YHQvtCx0LvQtdC90L3QvtCz0L4g0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8uINCd0LDRgdGC0YDQvtC50LrQuCDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyDQt9Cw0L/QvtC70L3QtdC90Ysg0L3QtSDQv9C+0LvQvdC+0YHRgtGM0Y4iKQ0KICAgICAgICB9DQogICAgICAgIGRlcGFydG1lbnRQYXJhbSA9IGRlcGFydG1lbnRQYXJhbUxpc3Q/LmdldCgwKQ0KICAgIH0NCiAgICByZXR1cm4gZGVwYXJ0bWVudFBhcmFtDQp9DQoNCi8vINCf0L7Qu9GD0YfQuNGC0Ywg0L/QsNGA0LDQvNC10YLRgNGLINC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPICjQuNC3INGB0L/RgNCw0LLQvtGH0L3QuNC60LAgMzEwKQ0KZGVmIGdldERlcGFydG1lbnRQYXJhbVRhYmxlKGRlZiBkZXBhcnRtZW50UGFyYW1JZCkgew0KICAgIGlmIChkZXBhcnRtZW50UGFyYW1UYWJsZSA9PSBudWxsKSB7DQogICAgICAgIGRlZiBmaWx0ZXIgPSAiTElOSyA9ICRkZXBhcnRtZW50UGFyYW1JZCBhbmQgVEFYX09SR0FOX0NPREUgPScke2RlY2xhcmF0aW9uRGF0YS50YXhPcmdhbkNvZGV9JyBhbmQgS1BQID0nJHtkZWNsYXJhdGlvbkRhdGEua3BwfSciDQogICAgICAgIGRlZiBkZXBhcnRtZW50UGFyYW1UYWJsZUxpc3QgPSBnZXRQcm92aWRlcigzMTBMKS5nZXRSZWNvcmRzKGdldFJlcG9ydFBlcmlvZEVuZERhdGUoKSAtIDEsIG51bGwsIGZpbHRlciwgbnVsbCkNCiAgICAgICAgaWYgKGRlcGFydG1lbnRQYXJhbVRhYmxlTGlzdCA9PSBudWxsIHx8IGRlcGFydG1lbnRQYXJhbVRhYmxlTGlzdC5zaXplKCkgPT0gMCB8fCBkZXBhcnRtZW50UGFyYW1UYWJsZUxpc3QuZ2V0KDApID09IG51bGwpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oItCe0YjQuNCx0LrQsCDQv9GA0Lgg0L/QvtC70YPRh9C10L3QuNC4INC90LDRgdGC0YDQvtC10Log0L7QsdC+0YHQvtCx0LvQtdC90L3QvtCz0L4g0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8uINCd0LDRgdGC0YDQvtC50LrQuCDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyDQt9Cw0L/QvtC70L3QtdC90Ysg0L3QtSDQv9C+0LvQvdC+0YHRgtGM0Y4iKQ0KICAgICAgICB9DQogICAgICAgIGRlcGFydG1lbnRQYXJhbVRhYmxlID0gZGVwYXJ0bWVudFBhcmFtVGFibGVMaXN0LmdldCgwKQ0KICAgIH0NCiAgICByZXR1cm4gZGVwYXJ0bWVudFBhcmFtVGFibGUNCn0NCg0KZGVmIGdldExvbmcoZGVmIHZhbHVlKSB7DQogICAgcmV0dXJuICgoQmlnRGVjaW1hbCkgdmFsdWUpPy5zZXRTY2FsZSgwLCBCaWdEZWNpbWFsLlJPVU5EX0hBTEZfVVApDQp9DQoNCmRlZiBnZW5lcmF0ZVhtbEZpbGVJZCgpIHsNCiAgICBkZWYgZGVwYXJ0bWVudFBhcmFtID0gZ2V0RGVwYXJ0bWVudFBhcmFtKCkNCiAgICBkZWYgZGVwYXJ0bWVudFBhcmFtVHJhbnNwb3J0Um93ID0gZGVwYXJ0bWVudFBhcmFtID8gZ2V0RGVwYXJ0bWVudFBhcmFtVGFibGUoZGVwYXJ0bWVudFBhcmFtPy5yZWNvcmRfaWQ/LnZhbHVlKSA6IG51bGwNCiAgICBpZiAoZGVwYXJ0bWVudFBhcmFtICYmIGRlcGFydG1lbnRQYXJhbVRyYW5zcG9ydFJvdykgew0KICAgICAgICBkZWYgcl90ID0gVGF4VHlwZS5UUkFOU1BPUlQuZGVjbGFyYXRpb25QcmVmaXgNCiAgICAgICAgZGVmIGEgPSBkZXBhcnRtZW50UGFyYW1UcmFuc3BvcnRSb3c/LlRBWF9PUkdBTl9DT0RFX1BST00/LnZhbHVlDQogICAgICAgIGRlZiBrID0gZGVwYXJ0bWVudFBhcmFtVHJhbnNwb3J0Um93Py5UQVhfT1JHQU5fQ09ERT8udmFsdWUNCiAgICAgICAgZGVmIG8gPSBkZXBhcnRtZW50UGFyYW0/LklOTj8udmFsdWUgKyBkZXBhcnRtZW50UGFyYW1UcmFuc3BvcnRSb3c/LktQUD8udmFsdWUNCiAgICAgICAgZGVmIGRhdGUgPSBDYWxlbmRhci5nZXRJbnN0YW5jZSgpLmdldFRpbWUoKT8uZm9ybWF0KCJ5eXl5TU1kZCIpDQogICAgICAgIGRlZiBuID0gVVVJRC5yYW5kb21VVUlEKCkudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpDQogICAgICAgIC8vIFJfVF9BX0tfT19HR0dHTU1ERF9ODQogICAgICAgIGRlZiBmaWxlSWQgPSByX3QgKyAnXycgKw0KICAgICAgICAgICAgICAgIGEgKyAnXycgKw0KICAgICAgICAgICAgICAgIGsgKyAnXycgKw0KICAgICAgICAgICAgICAgIG8gKyAnXycgKw0KICAgICAgICAgICAgICAgIGRhdGUgKyAnXycgKw0KICAgICAgICAgICAgICAgIG4NCiAgICAgICAgcmV0dXJuIGZpbGVJZA0KICAgIH0NCiAgICByZXR1cm4gbnVsbA0KfQ=='

        addLongText(template_id, longString, 'CREATE_SCRIPT')
        logger.info("К версии макета добавлен скрипт")
    }

} catch (Exception ex) {
    logger.error("Error: ${ex.getLocalizedMessage()}. Все изменения откатаны")
}

def void addTypeTemplate(DeclarationType type, DeclarationTemplate template, boolean createType, boolean createTemplate) {
    def type_id = type.id ?: ""
    def type_name = type.name ?: ""
    def type_tax_type = type.taxType.code ?: ""
    def type_is_ifrs = type.isIfrs ? 1 : 0
    def type_ifrs_name = type.ifrsName ?: ""

    def template_id = template.id ?: ""
    def template_name = template.name ?: ""
    def template_version = template.version.format("dd.MM.yy")

    String declarationTypeSql = "INSERT INTO DECLARATION_TYPE (ID, NAME, TAX_TYPE, STATUS, IS_IFRS, IFRS_NAME) VALUES " +
            "('$type_id', '$type_name', '$type_tax_type', '0', '$type_is_ifrs', '$type_ifrs_name')"
    if (createType) {
        namedParameterJdbcTemplate.update(declarationTypeSql, [:])
        logger.info("Создан тип декларации с id = $type_id без версии макета")
    }

    String templateSql = "INSERT INTO DECLARATION_TEMPLATE (ID, DECLARATION_TYPE_ID, NAME, VERSION, STATUS) VALUES " +
            "($template_id, '$type_id', '$template_name', TO_DATE('$template_version', 'DD.MM.RR'), '1')"
    if (createTemplate) {
        namedParameterJdbcTemplate.update(templateSql, [:])
        logger.info("Создан макет декларации с id = $template_id для типа декларации с id = $type_id, но без xsd, jrxml и скрипта")
    }
}

def void addLongText(def template_id, String longString, String alias) {
    final int MAX_LENGTH = 2000
    namedParameterJdbcTemplate.update("UPDATE DECLARATION_TEMPLATE SET $alias = null where id = $template_id", [:])
    int start = 0
    longString = new String(longString.decodeBase64(), "UTF-8")
    while (start < longString.length()) {
        int end = (start + MAX_LENGTH) < longString.length() ? (start + MAX_LENGTH) : longString.length()
        String text = longString.substring(start, end)
        namedParameterJdbcTemplate.update('UPDATE DECLARATION_TEMPLATE SET ' + alias + ' = ' + alias + ' || :text where id = ' +template_id, ['text' : text])
        start += MAX_LENGTH
    }
}