import com.aplana.sbrf.taxaccounting.model.DeclarationTemplate
import com.aplana.sbrf.taxaccounting.model.DeclarationType
import org.apache.commons.io.IOUtils

/**
 * Создает макет декларации.
 *
 * # Инструкция:
 * Вставить текст данного скрипта на странице, соответствующей ссылке с окончанием:
 * .../gwtapp/#!scriptExecution
 * Нажать "Выполнить".
 */

boolean createType = false
boolean createTemplate = true
boolean addScript = true

try {
    // тип
    DeclarationType type = new DeclarationType()
    type.setId(11)
    type.setName('Декларация по налогу на прибыль (Банк) (с периода год 2014)')
    type.setTaxType(TaxType.INCOME)
    type.setIsIfrs(false)
    type.setIfrsName('')
    // макет
    DeclarationTemplate template = new DeclarationTemplate()
    template.setId(21688)
    template.setName('Декларация по налогу на прибыль (Банк) (с периода год 2014)')
    template.setVersion(Date.parse('dd.MM.yyyy', '01.01.2016'))

    def type_id = type.id
    def template_id = template.id

    def rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from DECLARATION_TYPE where id = $type_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Макет декларации с данным id = $type_id уже существует в системе!")
        if (createType) {
            return
        }
    }

    rs = namedParameterJdbcTemplate.queryForObject("SELECT count(id) from DECLARATION_TEMPLATE where id = $template_id", [:], Integer.class)
    if (rs == 1) {
        logger.info("Версия макета декларации с данным id = $template_id уже существует в системе!")
        if (createTemplate) {
            return
        }
    }

    addTypeTemplate(type, template, createType, createTemplate)

    String longString = ''
    if (addScript) {
        longString += 'cGFja2FnZSBmb3JtX3RlbXBsYXRlLmluY29tZS5kZWNsYXJhdGlvbl9iYW5rXzIudjIwMTUNCg0KaW1wb3J0IGNvbS5hcGxhbmEuc2JyZi50YXhhY2NvdW50aW5nLm1vZGVsLkZvcm1EYXRhDQppbXBvcnQgY29tLmFwbGFuYS5zYnJmLnRheGFjY291bnRpbmcubW9kZWwuRm9ybURhdGFFdmVudA0KaW1wb3J0IGNvbS5hcGxhbmEuc2JyZi50YXhhY2NvdW50aW5nLm1vZGVsLlRheFR5cGUNCmltcG9ydCBjb20uYXBsYW5hLnNicmYudGF4YWNjb3VudGluZy5tb2RlbC5sb2cuTG9nTGV2ZWwNCmltcG9ydCBjb20uYXBsYW5hLnNicmYudGF4YWNjb3VudGluZy5tb2RlbC5yZWZib29rLlJlZkJvb2sNCmltcG9ydCBncm9vdnkudHJhbnNmb3JtLkZpZWxkDQppbXBvcnQgZ3Jvb3Z5LnhtbC5NYXJrdXBCdWlsZGVyDQoNCmltcG9ydCBqYXZheC54bWwuc3RyZWFtLlhNTFN0cmVhbVJlYWRlcg0KDQovKioNCiAqINCU0LXQutC70LDRgNCw0YbQuNGPINC/0L4g0L3QsNC70L7Qs9GDINC90LAg0L/RgNC40LHRi9C70YwgKNCR0LDQvdC6KSAo0YEg0L/QtdGA0LjQvtC00LAg0LPQvtC0IDIwMTQpDQogKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUgWE1MINC00LvRjyDQtNC10LrQu9Cw0YDQsNGG0LjQuCDQvdCw0LvQvtCz0LAg0L3QsCDQv9GA0LjQsdGL0LvRjC4NCiAqINCy0LXRgNGB0LjRjyAyMDE2INCz0L7QtNCwDQogKiBkZWNsYXJhdGlvblRlbXBsYXRlSWQ9MjE2ODgNCiAqLw0KDQpzd2l0Y2ggKGZvcm1EYXRhRXZlbnQpIHsNCiAgICBjYXNlIEZvcm1EYXRhRXZlbnQuQ1JFQVRFIDogLy8g0YHQvtC30LTQsNGC0YwgLyDQvtCx0L3QvtCy0LjRgtGMDQogICAgICAgIGNoZWNrRGVwYXJ0bWVudFBhcmFtcyhMb2dMZXZlbC5XQVJOSU5HKQ0KICAgICAgICBzb3VyY2VDaGVjayh0cnVlLCBMb2dMZXZlbC5XQVJOSU5HKQ0KICAgICAgICBicmVhaw0KICAgIGNhc2UgRm9ybURhdGFFdmVudC5DSEVDSyA6IC8vINC/0YDQvtCy0LXRgNC40YLRjA0KICAgICAgICBkZWYgbG9nTGV2ZWwgPSBkZWNsYXJhdGlvbkRhdGEuYWNjZXB0ZWQgPyBMb2dMZXZlbC5XQVJOSU5HIDogTG9nTGV2ZWwuRVJST1INCiAgICAgICAgY2hlY2tEZXBhcnRtZW50UGFyYW1zKGxvZ0xldmVsKQ0KICAgICAgICBzb3VyY2VDaGVjayh0cnVlLCBsb2dMZXZlbCkNCiAgICAgICAgbG9naWNDaGVjayhsb2dMZXZlbCkNCiAgICAgICAgYnJlYWsNCiAgICBjYXNlIEZvcm1EYXRhRXZlbnQuTU9WRV9DUkVBVEVEX1RPX0FDQ0VQVEVEIDogLy8g0L/RgNC40L3Rj9GC0Ywg0LjQtyDRgdC+0LfQtNCw0L3QsA0KICAgICAgICBkZWYgbG9nTGV2ZWwgPSBkZWNsYXJhdGlvbkRhdGEuYWNjZXB0ZWQgPyBMb2dMZXZlbC5XQVJOSU5HIDogTG9nTGV2ZWwuRVJST1INCiAgICAgICAgY2hlY2tEZXBhcnRtZW50UGFyYW1zKGxvZ0xldmVsKQ0KICAgICAgICBzb3VyY2VDaGVjayh0cnVlLCBsb2dMZXZlbCkNCiAgICAgICAgbG9naWNDaGVjayhMb2dMZXZlbC5FUlJPUikNCiAgICAgICAgYnJlYWsNCiAgICBjYXNlIEZvcm1EYXRhRXZlbnQuTU9WRV9BQ0NFUFRFRF9UT19DUkVBVEVEOiAvLyDQvtGC0LzQtdC90LjRgtGMINC/0YDQuNC90Y/RgtC40LUNCiAgICAgICAg0YFhbmNlbEFjY2VwdGVkKCkNCiAgICAgICAgYnJlYWsNCiAgICBjYXNlIEZvcm1EYXRhRXZlbnQuUFJFX0NBTENVTEFUSU9OX0NIRUNLOg0KICAgICAgICBjaGVja0RlcGFydG1lbnRQYXJhbXMoTG9nTGV2ZWwuV0FSTklORykNCiAgICAgICAgc291cmNlQ2hlY2sodHJ1ZSwgTG9nTGV2ZWwuV0FSTklORykNCiAgICAgICAgYnJlYWsNCiAgICBjYXNlIEZvcm1EYXRhRXZlbnQuQ0FMQ1VMQVRFOg0KICAgICAgICBjaGVja0RlcGFydG1lbnRQYXJhbXMoTG9nTGV2ZWwuV0FSTklORykNCiAgICAgICAgc291cmNlQ2hlY2sodHJ1ZSwgTG9nTGV2ZWwuV0FSTklORykNCiAgICAgICAgZ2VuZXJhdGVYTUwoKQ0KICAgICAgICBicmVhaw0KICAgIGRlZmF1bHQ6DQogICAgICAgIHJldHVybg0KfQ0KDQpARmllbGQNCmRlZiB2ZXJzaW9uID0gJzUuMDYnDQoNCi8vINCa0Y3RiCDQv9GA0L7QstCw0LnQtNC10YDQvtCyDQpARmllbGQNCmRlZiBwcm92aWRlckNhY2hlID0gWzpdDQoNCi8vINCa0Y3RiCDQt9C90LDRh9C10L3QuNC5INGB0L/RgNCw0LLQvtGH0L3QuNC60LANCkBGaWVsZA0KZGVmIHJlZkJvb2tDYWNoZSA9IFs6XQ0KDQovLyDQt9C90LDRh9C10L3QuNC1INC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPINC40Lcg0YHQv9GA0LDQstC+0YfQvdC40LrQsCAzMw0KQEZpZWxkDQpkZWYgZGVwYXJ0bWVudFBhcmFtID0gbnVsbA0KDQovLyDQt9C90LDRh9C10L3QuNC1INC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPINC40Lcg0YHQv9GA0LDQstC+0YfQvdC40LrQsCAzMzAgKNGC0LDQsdC70LjRhtCwKQ0KQEZpZWxkDQpkZWYgZGVwYXJ0bWVudFBhcmFtVGFibGUgPSBudWxsDQoNCkBGaWVsZA0KZGVmIHJlcG9ydFBlcmlvZEVuZERhdGUgPSBudWxsDQoNCmRlZiBnZXRFbmREYXRlKCkgew0KICAgIGlmIChyZXBvcnRQZXJpb2RFbmREYXRlID09IG51bGwpIHsNCiAgICAgICAgcmVwb3J0UGVyaW9kRW5kRGF0ZSA9IHJlcG9ydFBlcmlvZFNlcnZpY2UuZ2V0RW5kRGF0ZShkZWNsYXJhdGlvbkRhdGEucmVwb3J0UGVyaW9kSWQpPy50aW1lDQogICAgfQ0KICAgIHJldHVybiByZXBvcnRQZXJpb2RFbmREYXRlDQp9DQoNCi8vINCg0LDQt9GL0LzQtdC90L7QstCw0L3QuNC1INC30LDQv9C40YHQuCDRgdC/0YDQsNCy0L7Rh9C90LjQutCwDQpkZWYgZ2V0UmVmQm9va1ZhbHVlKGRlZiBsb25nIHJlZkJvb2tJZCwgZGVmIHJlY29yZElkKSB7DQogICAgcmV0dXJuIGZvcm1EYXRhU2VydmljZS5nZXRSZWZCb29rVmFsdWUocmVmQm9va0lkLCByZWNvcmRJZCwgcmVmQm9va0NhY2hlKQ0KfQ0KDQp2b2lkIGNoZWNrRGVwYXJ0bWVudFBhcmFtcyhMb2dMZXZlbCBsb2dMZXZlbCkgew0KICAgIC8vINCf0LDRgNCw0LzQtdGC0YDRiyDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjw0KICAgIGRlZiBkZXBhcnRtZW50UGFyYW0gPSBnZXREZXBhcnRtZW50UGFyYW0oKQ0KICAgIGRlZiBkZXBhcnRtZW50UGFyYW1JbmNvbWVSb3cgPSBnZXREZXBhcnRtZW50UGFyYW1UYWJsZShkZXBhcnRtZW50UGFyYW0ucmVjb3JkX2lkLnZhbHVlKQ0KDQogICAgLy8g0J/RgNC+0LLQtdGA0LrQuCDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjw0KICAgIGRlZiBMaXN0PFN0cmluZz4gZXJyb3JMaXN0ID0gZ2V0RXJyb3JUYWJsZShkZXBhcnRtZW50UGFyYW1JbmNvbWVSb3cpDQogICAgZm9yIChTdHJpbmcgZXJyb3IgOiBlcnJvckxpc3QpIHsNCiAgICAgICAgbG9nZ2VyLmxvZyhsb2dMZXZlbCwgU3RyaW5nLmZvcm1hdCgi0J3QsCDRhNC+0YDQvNC1INC90LDRgdGC0YDQvtC10Log0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8g0YLQtdC60YPRidC10LPQviDRjdC60LfQtdC80L/Qu9GP0YDQsCDQtNC10LrQu9Cw0YDQsNGG0LjQuCDQvtGC0YHRg9GC0YHRgtCy0YPQtdGCINC30L3QsNGH0LXQvdC40LUg0LDRgtGA0LjQsdGD0YLQsCAlcyEiLCBlcnJvcikpDQogICAgfQ0KICAgIGVycm9yTGlzdCA9IGdldEVycm9yRGVwYXJ0bWVudChkZXBhcnRtZW50UGFyYW0pDQogICAgZm9yIChTdHJpbmcgZXJyb3IgOiBlcnJvckxpc3QpIHsNCiAgICAgICAgbG9nZ2VyLmxvZyhsb2dMZXZlbCwgU3RyaW5nLmZvcm1hdCgi0J3QsCDRhNC+0YDQvNC1INC90LDRgdGC0YDQvtC10Log0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8g0YLQtdC60YPRidC10LPQviDRjdC60LfQtdC80L/Qu9GP0YDQsCDQtNC10LrQu9Cw0YDQsNGG0LjQuCDQvtGC0YHRg9GC0YHRgtCy0YPQtdGCINC30L3QsNGH0LXQvdC40LUg0LDRgtGA0LjQsdGD0YLQsCAlcyEiLCBlcnJvcikpDQogICAgfQ0KDQogICAgZXJyb3JMaXN0ID0gZ2V0RXJyb3JWZXJzaW9uKGRlcGFydG1lbnRQYXJhbSkNCiAgICBmb3IgKFN0cmluZyBlcnJvciA6IGVycm9yTGlzdCkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBTdHJpbmcuZm9ybWF0KCLQndCwINGE0L7RgNC80LUg0L3QsNGB0YLRgNC+0LXQuiDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyDRgtC10LrRg9GJ0LXQs9C+INGN0LrQt9C10LzQv9C70Y/RgNCwINC00LXQutC70LDRgNCw0YbQuNC4INC90LXQstC10YDQvdC+INGD0LrQsNC30LDQvdC+INC30L3QsNGH0LXQvdC40LUg0LDRgtGA0LjQsdGD0YLQsCAlcyIsIGVycm9yKSkNCiAgICB9DQp9DQoNCi8vINCf0YDQvtCy0LXRgNC60LAg0L3QsNC70L7Qs9C+0LLQvtC5INGE0L7RgNC80Ysg0LjRgdGC0L7Rh9C90LjQutCwIMKr0KHQstC10LTQtdC90LjRjyDQviDRgdGD0LzQvNCw0YUg0L3QsNC70L7Qs9CwINC90LAg0L/RgNC40LHRi9C70YwsINGD0L/Qu9Cw0YfQtdC90L3QvtCz0L4g0JHQsNC90LrQvtC8INC30LAg0YDRg9Cx0LXQttC+0LzCuyAo0LTQsNC90L3QsNGPINGE0L7RgNC80LAt0LjRgdGC0L7Rh9C90LjQuiDRgdC+0LfQtNCw0L3QsCDQuCDQvdCw0YXQvtC00LjRgtGB0Y8g0LIg0YHRgtCw0YLRg9GB0LUgwqvQn9GA0LjQvdGP0YLQsMK7KQ0KcHJpdmF0ZSBib29sZWFuIHNvdXJjZUNoZWNrKGJvb2xlYW4gbG9nZ2VyTmVlZCwgTG9nTGV2ZWwgbG9nTGV2ZWwpIHsNCiAgICBkZWYgc291cmNlRm9ybVR5cGVJZCA9IDQyMQ0KICAgIGRlZiBzb3VyY2VGb3JtVHlwZSA9IGZvcm1UeXBlU2VydmljZS5nZXQoc291cmNlRm9ybVR5cGVJZCkNCiAgICBkZWYgc3VjY2VzcyA9IHRydWUNCg0KICAgIGRlZiBmb3JtRGF0YUNvbGxlY3Rpb24gPSBkZWNsYXJhdGlvblNlcnZpY2UuZ2V0QWNjZXB0ZWRGb3JtRGF0YVNvdXJjZXMoZGVjbGFyYXRpb25EYXRhLCB1c2VySW5mbywgbG9nZ2VyKQ0KICAgIGRlZiBkZXBhcnRtZW50Rm9ybVR5cGUgPSBmb3JtRGF0YUNvbGxlY3Rpb24/LnJlY29yZHM/LmZpbmQgeyBpdC5mb3JtVHlwZS5pZCA9PSBzb3VyY2VGb3JtVHlwZUlkIH0NCiAgICBkZWYgcmVwb3J0UGVyaW9kID0gcmVwb3J0UGVyaW9kU2VydmljZS5nZXQoZGVjbGFyYXRpb25EYXRhLnJlcG9ydFBlcmlvZElkKQ0KICAgIGlmIChkZXBhcnRtZW50Rm9ybVR5cGUgPT0gbnVsbCkgew0KICAgICAgICBpZiAobG9nZ2VyTmVlZCkgew0KICAgICAgICAgICAgbG9nZ2VyLmxvZyhsb2dMZXZlbCwgItCd0LUg0L3QsNC50LTQtdC9INGN0LrQt9C10LzQv9C70Y/RgCDCqyR7c291cmNlRm9ybVR5cGUubmFtZX3CuyDQt9CwICR7cmVwb3J0UGVyaW9kLm5hbWV9ICR7cmVwb3J0UGVyaW9kLnRheFBlcmlvZC55ZWFyfSDQsiDRgdGC0LDRgtGD0YHQtSDCq9Cf0YDQuNC90Y/RgtCwwrsgKNC90LDQu9C+0LPQvtCy0LDRjyDRhNC+0YDQvNCwINC90LUg0L3QsNC30L3QsNGH0LXQvdCwINC40YHRgtC+0YfQvdC40LrQvtC8INC00LXQutC70LDRgNCw0YbQuNC4INCR0LDQvdC60LAv0L3QsNC30L3QsNGH0LXQvdCwINC40YHRgtC+0YfQvdC40LrQvtC8LCDQvdC+INC90LUg0YHQvtC30LTQsNC90LAv0L3QsNC30L3QsNGH0LXQvdCwINC40YHRgtC+0YfQvdC40LrQvtC8LCDRgdC+0LfQtNCw0L3QsCwg0L3QviDQvdC1INC/0YDQuNC90Y/RgtCwKS4g0J/RgNC4INGA0LDRgdGH0ZHRgtC1INGN0LrQt9C10LzQv9C70Y/RgNCwINC00LXQutC70LDRgNCw0YbQuNC4INGB0YLRgNC+0LrQsCAyNDAg0JvQuNGB0YLQsCAwMiDQsdGD0LTQtdGCINC30LDQv9C+0LvQvdC10L3QsCDQt9C90LDRh9C10L3QuNC10LwgwqswwrshIikNCiAgICAgICAgfQ0KICAgICAgICBzdWNjZXNzID0gZmFsc2UNCiAgICB9DQogICAgcmV0dXJuIHN1Y2Nlc3MNCn0NCg0KLy8g0JvQvtCz0LjRh9C10YHQutC40LUg0L/RgNC+0LLQtdGA0LrQuC4NCnZvaWQgbG9naWNDaGVjayhMb2dMZXZlbCBsb2dMZXZlbCkgew0KICAgIGRlZiBlbXB0eSA9IDANCiAgICAvLyDQv9C+0LvRg9GH0LXQvdC40LUg0LTQsNC90L3Ri9GFINC40LcgeG1sJ9C60LgNCiAgICBkZWYgcmVhZGVyID0gZ2V0WG1sU3RyZWFtUmVhZGVyKGRlY2xhcmF0aW9uRGF0YS5yZXBvcnRQZXJpb2RJZCwgZGVjbGFyYXRpb25EYXRhLmRlcGFydG1lbnRJZCwgZmFsc2UsIGZhbHNlKQ0KICAgIGlmKHJlYWRlciA9PSBudWxsKXsNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgZGVmIGVsZW1lbnRzID0gWzpdDQoNCiAgICBkZWYgbmFsVmlwbDMxMSwgbmFsSXNjaGlzbCwgbmFsVmlwbDMxMUZCLCBuYWxJc2NoaXNsRkIsIG5hbFZpcGwzMTFTdWIsIG5hbElzY2hpc2xTdWIsIHN0YXZOYWxGQiwgcmFzY2hOYWxGb3VuZCA9IGZhbHNlDQogICAgZGVmIHZuZVJlYWxEb2hTdCwgdm5lUmVhbERvaEJlenYsIHZuZVJlYWxEb2hJemwsIHZuZVJlYWxEb2hWUmFzaCwgdm5lUmVhbERvaFJpbkNCREQsIHZuZVJlYWxEb2hDb3IsIHZuZVJlYWxEb2hWcywgZG9oVm5lcmVhbEZvdW5kID0gZmFsc2UNCiAgICBkZWYgY29zdlJhc2hWcywgbmFsb2dpLCByYXNoQ2FwVmwxMCwgcmFzaENhcFZsMzAsIHJhc2haZW1VY2hWcywgcmFzaFJlYWxGb3VuZCA9IGZhbHNlDQogICAgZGVmIHJhc2hWbmVyZWFsUHJETywgdWJpdFJlYWxQcmF2VHIsIHJhc2hMaWt2T1MsIHJhc2hTaHRyYWYsIHJhc2hSaW5DQkRELCByYXNoVm5lcmVhbFZzLCByYXNoVm5lUmVhbEZvdW5kID0gZmFsc2UNCiAgICBkZWYgc3RvaW1SZWFsUFREb1NyLCBzdG9pbVJlYWxQVEZvdW5kID0gZmFsc2UNCiAgICBkZWYgdmlydWNoUmVhbFBURG9TciwgdmlydWNoUmVhbFBURm91bmQgPSBmYWxzZQ0KICAgIGRlZiB1Yml0MVByZXYyNjksIHViaXQxU29vdDI2OSwgdWJpdFJlYWxQVDFGb3VuZCA9IGZhbHNlDQogICAgZGVmIGtvZE5PLCBwb01lc3R1LCBkb2N1bWVudEZvdW5kID0gZmFsc2UNCiAgICBkZWYgbmFpbU9yZywgaW5uSnVsTnBKdWwsIGtwcEp1bE5wSnVsLCBucEp1bEZvdW5kID0gZmFsc2UNCiAgICBkZWYgcHJQb2RwLCBwb2RwaXNhbnRGb3VuZCA9IGZhbHNlDQogICAgZGVmIHNpZ25hdG9yeVN1cm5hbWUsIHNpZ25hdG9yeUZpcnN0TmFtZSwgZmlvRm91bmQgPSBmYWxzZQ0KICAgIGRlZiBuYWltRG9rLCBzdlByZWRGb3VuZCA9IGZhbHNlDQogICAgZGVmIG9rdG1vTmFsUFVBdiwgbmFsUFVBdkZvdW5kID0gZmFsc2UNCiAgICBkZWYgb2t0bW9OYWxQVU1lcywgbmFsUFVNZXNGb3VuZCA9IGZhbHNlDQogICAgZGVmIG9rdmVkLCBzdk5QRm91bmQgPSBmYWxzZQ0KICAgIGRlZiBpbm5KdWxTdlJlb3JnSnVsLCBrcHBTdlJlb3JnSnVsLCBmb3JtUmVvcmcsIHN2UmVvcmdKdWxGb3VuZCA9IGZhbHNlDQogICAgZGVmIHZlcnNGb3JtLCBpZEZpbGUsIGtvZE5PUHJvbSwgZmlsZUZvdW5kID0gZmFsc2UNCg0KICAgIHRyeSB7IC8vINC40YnQtdC8INC/0L7QutCwINC10YHRgtGMINGN0LvQtdC80LXQvdGC0Ysg0Lgg0LXRgdGC0Ywg0YfRgtC+INC40YHQutCw0YLRjA0KICAgICAgICB3aGlsZShyZWFkZXIuaGFzTmV4dCgpICYmDQogICAgICAgICAgICAgICAgIShyYXNjaE5hbEZvdW5kICYmIGRvaFZuZXJlYWxGb3VuZCAmJiByYXNoUmVhbEZvdW5kICYmIHJhc2hWbmVSZWFsRm91bmQgJiYgc3RvaW1SZWFsUFRGb3VuZCAmJiB2aXJ1Y2hSZWFsUFRGb3VuZCAmJiB1Yml0UmVhbFBUMUZvdW5kKSkgew0KICAgICAgICAgICAgaWYgKHJlYWRlci5zdGFydEVsZW1lbnQpIHsNCiAgICAgICAgICAgICAgICBlbGVtZW50c1tyZWFkZXIubmFtZS5sb2NhbFBhcnRdID0gdHJ1ZQ0KICAgICAgICAgICAgICAgIGlmICghcmFzY2hOYWxGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQn9GA0LjQsdGL0LvRjCcsICfQoNCw0YHRh9Cd0LDQuyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFzY2hOYWxGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgbmFsVmlwbDMxMSA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0J3QsNC70JLRi9C/0LszMTEiKQ0KICAgICAgICAgICAgICAgICAgICBuYWxJc2NoaXNsID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQndCw0LvQmNGB0YfQuNGB0LsiKQ0KICAgICAgICAgICAgICAgICAgICBuYWxWaXBsMzExRkIgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCd0LDQu9CS0YvQv9C7MzEx0KTQkSIpDQogICAgICAgICAgICAgICAgICAgIG5hbElzY2hpc2xGQiA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0J3QsNC70JjRgdGH0LjRgdC70KTQkSIpDQogICAgICAgICAgICAgICAgICAgIG5hbFZpcGwzMTFTdWIgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCd0LDQu9CS0YvQv9C7MzEx0KHRg9CxIikNCiAgICAgICAgICAgICAgICAgICAgbmFsSXNjaGlzbFN1YiA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0J3QsNC70JjRgdGH0LjRgdC70KHRg9CxIikNCiAgICAgICAgICAgICAgICAgICAgc3Rhdk5hbEZCID0gZ2V0WG1sVmFsdWUocmVhZGVyLCAn0KHRgtCw0LLQndCw0LvQpNCRJykNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkb2hWbmVyZWFsRm91bmQgJiYgaXNDdXJyZW50Tm9kZShbJ9CU0L7QutGD0LzQtdC90YInLCAn0J/RgNC40LHRi9C70YwnLCAn0KDQsNGB0YfQndCw0LsnLCAn0JTQvtGF0KDQtdCw0LvQktC90LXQoNC10LDQuycsICfQlNC+0YXQktC90LXQoNC10LDQuyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgZG9oVm5lcmVhbEZvdW5kID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB2bmVSZWFsRG9oU3QgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCS0L3QtdCg0LXQsNC70JTQvtGF0KHRgiIpDQogICAgICAgICAgICAgICAgICAgIHZuZVJlYWxEb2hCZXp2ID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQktC90LXQoNC10LDQu9CU0L7RhdCR0LXQt9CyIikNCiAgICAgICAgICAgICAgICAgICAgdm5lUmVhbERvaEl6bCA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0JLQvdC10KDQtdCw0LvQlNC+0YXQmNC30LsiKQ0KICAgICAgICAgICAgICAgICAgICB2bmVSZWFsRG9oVlJhc2ggPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCS0L3QtdCg0LXQsNC70JTQvtGF0JLQoNCw0YHRhSIpDQogICAgICAgICAgICAgICAgICAgIHZuZVJlYWxEb2hSaW5DQkREID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQktC90LXQoNC10LDQu9CU0L7RhdCg0YvQvdCm0JHQlNCUIikNCiAgICAgICAgICAgICAgICAgICAgdm5lUmVhbERvaENvciA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0JLQvdC10KDQtdCw0LvQlNC+0YXQmtC+0YAiKQ0KICAgICAgICAgICAgICAgICAgICB2bmVSZWFsRG9oVnMgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCS0L3QtdCg0LXQsNC70JTQvtGF0JLRgSIpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghcmFzaFJlYWxGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQn9GA0LjQsdGL0LvRjCcsICfQoNCw0YHRh9Cd0LDQuycsICfQoNCw0YHRhdCg0LXQsNC70JLQvdC10KDQtdCw0LsnLCAn0KDQsNGB0YXQoNC10LDQuyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFzaFJlYWxGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgY29zdlJhc2hWcyA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0JrQvtGB0LLQoNCw0YHRhdCS0YEiKQ0KICAgICAgICAgICAgICAgICAgICBuYWxvZ2kgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCd0LDQu9C+0LPQuCIpDQogICAgICAgICAgICAgICAgICAgIHJhc2hDYXBWbDEwID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQoNCw0YHRhdCa0LDQv9CS0LsxMCIpDQogICAgICAgICAgICAgICAgICAgIHJhc2hDYXBWbDMwID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQoNCw0YHRhdCa0LDQv9CS0LszMCIpDQogICAgICAgICAgICAgICAgICAgIHJhc2haZW1VY2hWcyA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0KDQsNGB0YXQl9C10LzQo9GH0JLRgSIpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghcmFzaFZuZVJlYWxGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQn9GA0LjQsdGL0LvRjCcsICfQoNCw0YHRh9Cd0LDQuycsICfQoNCw0YHRhdCg0LXQsNC70JLQvdC10KDQtdCw0LsnLCAn0KDQsNGB0YXQktC90LXQoNC10LDQuyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFzaFZuZVJlYWxGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgcmFzaFZuZXJlYWxQckRPID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQoNCw0YHRhdCS0L3QtdGA0LXQsNC70J/RgNCU0J4iKQ0KICAgICAgICAgICAgICAgICAgICB1Yml0UmVhbFByYXZUciA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0KPQsdGL0YLQoNC10LDQu9Cf0YDQsNCy0KLRgCIpDQogICAgICAgICAgICAgICAgICAgIHJhc2hMaWt2T1MgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCg0LDRgdGF0JvQuNC60LLQntChIikNCiAgICAgICAgICAgICAgICAgICAgcmFzaFNodHJhZiA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0KDQsNGB0YXQqNGC0YDQsNGEIikNCiAgICAgICAgICAgICAgICAgICAgcmFzaFJpbkNCREQgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCg0LDRgdGF0KDRi9C90KbQkdCU0JQiKQ0KICAgICAgICAgICAgICAgICAgICByYXNoVm5lcmVhbFZzID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQoNCw0YHRhdCS0L3QtdCg0LXQsNC70JLRgSIpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RvaW1SZWFsUFRGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQn9GA0LjQsdGL0LvRjCcsICfQoNCw0YHRh9Cd0LDQuycsICfQoNCw0YHRh9Cg0LDRgdGF0J7Qv9C10YAnLCAn0KHRgtC+0LjQvNCg0LXQsNC70J/QoiddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgc3RvaW1SZWFsUFRGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgc3RvaW1SZWFsUFREb1NyID0gZ2V0WG1sRGVjaW1hbChyZWFkZXIsICLQodGC0L7QuNC80KDQtdCw0LvQn9Ci0JTQvtCh0YAiKQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZpcnVjaFJlYWxQVEZvdW5kICYmIGlzQ3VycmVudE5vZGUoWyfQlNC+0LrRg9C80LXQvdGCJywgJ9Cf0YDQuNCx0YvQu9GMJywgJ9Cg0LDRgdGH0J3QsNC7JywgJ9Cg0LDRgdGH0KDQsNGB0YXQntC/0LXRgCcsICfQktGL0YDRg9GH0KDQtdCw0LvQn9CiJ10sIGVsZW1lbnRzKSkgew0KICAgICAgICAgICAgICAgICAgICB2aXJ1Y2hSZWFsUFRGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgdmlydWNoUmVhbFBURG9TciA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0JLRi9GA0YPRh9Cg0LXQsNC70J/QotCU0L7QodGAIikNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1Yml0UmVhbFBUMUZvdW5kICYmIGlzQ3VycmVudE5vZGUoWyfQlNC+0LrRg9C80LXQvdGCJywgJ9Cf0YDQuNCx0YvQu9GMJywgJ9Cg0LDRgdGH0J3QsNC7JywgJ9Cg0LDRgdGH0KDQsNGB0YXQntC/0LXRgCcsICfQo9Cx0YvRgtCg0LXQsNC70J/QojEnXSwgZWxlbWVudHMpKSB7DQogICAgICAgICAgICAgICAgICAgIHViaXRSZWFsUFQxRm91bmQgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIHViaXQxUHJldjI2OSA9IGdldFhtbERlY2ltYWwocmVhZGVyLCAi0KPQsdGL0YIx0J/RgNC10LIyNjkiKQ0KICAgICAgICAgICAgICAgICAgICB1Yml0MVNvb3QyNjkgPSBnZXRYbWxEZWNpbWFsKHJlYWRlciwgItCj0LHRi9GCMdCh0L7QvtGCMjY5IikNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkb2N1bWVudEZvdW5kICYmIGlzQ3VycmVudE5vZGUoWyfQlNC+0LrRg9C80LXQvdGCJ10sIGVsZW1lbnRzKSkgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudEZvdW5kID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICBrb2ROTyA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9Ca0L7QtNCd0J4nKQ0KICAgICAgICAgICAgICAgICAgICBwb01lc3R1ID0gZ2V0WG1sVmFsdWUocmVhZGVyLCAn0J/QvtCc0LXRgdGC0YMnKQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN2TlBGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQodCy0J3QnyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgc3ZOUEZvdW5kID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICBva3ZlZCA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9Ce0JrQktCt0JQnKQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBvZHBpc2FudEZvdW5kICYmIGlzQ3VycmVudE5vZGUoWyfQlNC+0LrRg9C80LXQvdGCJywgJ9Cf0L7QtNC/0LjRgdCw0L3RgiddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgcG9kcGlzYW50Rm91bmQgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIHByUG9kcCA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9Cf0YDQn9C+0LTQvycpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlvRm91bmQgJiYgaXNDdXJyZW50Tm9kZShbJ9CU0L7QutGD0LzQtdC90YInLCAn0J/QvtC00L/QuNGB0LDQvdGCJywgJ9Ck0JjQniddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgZmlvRm91bmQgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIHNpZ25hdG9yeVN1cm5hbWUgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQpNCw0LzQuNC70LjRjycpDQogICAgICAgICAgICAgICAgICAgIHNpZ25hdG9yeUZpcnN0TmFtZSA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9CY0LzRjycpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3ZQcmVkRm91bmQgJiYgaXNDdXJyZW50Tm9kZShbJ9CU0L7QutGD0LzQtdC90YInLCAn0J/QvtC00L/QuNGB0LDQvdGCJywgJ9Ch0LLQn9GA0LXQtCddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgc3ZQcmVkRm91bmQgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIG5haW1Eb2sgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQndCw0LjQvNCU0L7QuicpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbnBKdWxGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQodCy0J3QnycsICfQndCf0K7QmyddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgbnBKdWxGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgbmFpbU9yZyA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9Cd0LDQuNC80J7RgNCzJykNCiAgICAgICAgICAgICAgICAgICAgaW5uSnVsTnBKdWwgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQmNCd0J3QrtCbJykNCiAgICAgICAgICAgICAgICAgICAga3BwSnVsTnBKdWwgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQmtCf0J8nKQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN2UmVvcmdKdWxGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFsn0JTQvtC60YPQvNC10L3RgicsICfQodCy0J3QnycsICfQndCf0K7QmycsICfQodCy0KDQtdC+0YDQs9Cu0JsnXSwgZWxlbWVudHMpKSB7DQogICAgICAgICAgICAgICAgICAgIHN2UmVvcmdKdWxGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgaW5uSnVsU3ZSZW9yZ0p1bCA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9CY0J3QndCu0JsnKQ0KICAgICAgICAgICAgICAgICAgICBrcHBTdlJlb3JnSnVsID0gZ2V0WG1sVmFsdWUocmVhZGVyLCAn0JrQn9CfJykNCiAgICAgICAgICAgICAgICAgICAgZm9ybVJlb3JnID0gZ2V0WG1sVmFsdWUocmVhZGVyLCAn0KTQvtGA0LzQoNC10L7RgNCzJykNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFuYWxQVUF2Rm91bmQgJiYgaXNDdXJyZW50Tm9kZShbJ9CU0L7QutGD0LzQtdC90YInLCAn0J/RgNC40LHRi9C70YwnLCAn0J3QsNC70J/QoycsICfQndCw0LvQn9Cj0JDQsiddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgbmFsUFVBdkZvdW5kID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICBva3Rtb05hbFBVQXYgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQntCa0KLQnNCeJykNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFuYWxQVU1lc0ZvdW5kICYmIGlzQ3VycmVudE5vZGUoWyfQlNC+0LrRg9C80LXQvdGCJywgJ9Cf0YDQuNCx0YvQu9GMJywgJ9Cd0LDQu9Cf0KMnLCAn0J3QsNC70J/Qo9Cc0LXRgSddLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgbmFsUFVNZXNGb3VuZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgb2t0bW9OYWxQVU1lcyA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9Ce0JrQotCc0J4nKQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGVGb3VuZCAmJiBpc0N1cnJlbnROb2RlKFtdLCBlbGVtZW50cykpIHsNCiAgICAgICAgICAgICAgICAgICAgZmlsZUZvdW5kID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB2ZXJzRm9ybSA9IGdldFhtbFZhbHVlKHJlYWRlciwgJ9CS0LXRgNGB0KTQvtGA0LwnKQ0KICAgICAgICAgICAgICAgICAgICBpZEZpbGUgPSBnZXRYbWxWYWx1ZShyZWFkZXIsICfQmNC00KTQsNC50LsnKQ0KICAgICAgICAgICAgICAgICAgICBkZWYgaWRGaWxlUGFydHMgPSBpZEZpbGU/LnNwbGl0KCJfIikNCiAgICAgICAgICAgICAgICAgICAgaWYgKGlkRmlsZVBhcnRzLnNpemUoKSA+PSAzKSB7IC8vINC90LAg0LLRgdGP0LrQuNC5INGB0LvRg9GH0LDQuQ0KICAgICAgICAgICAgICAgICAgICAgICAga29kTk9Qcm9tID0gaWRGaWxlUGFydHNbMl0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyZWFkZXIuZW5kRWxlbWVudCkgew0KICAgICAgICAgICAgICAgIGVsZW1lbnRzW3JlYWRlci5uYW1lLmxvY2FsUGFydF0gPSBmYWxzZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmVhZGVyLm5leHQoKQ0KICAgICAgICB9DQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgcmVhZGVyLmNsb3NlKCkNCiAgICB9DQoNCiAgICBpZiAobmFpbU9yZyA9PSBudWxsIHx8IG5haW1PcmcudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0J3QsNC40LzQtdC90L7QstCw0L3QuNC1INC+0YDQs9Cw0L3QuNC30LDRhtC40LggKNC+0LHQvtGB0L7QsdC70LXQvdC90L7Qs9C+INC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPKSIsICLQndCf0K7Qmy7QndCw0LjQvNCe0YDQsyIsICLQndCw0LjQvNC10L3QvtCy0LDQvdC40LUg0LTQu9GPINGC0LjRgtGD0LvRjNC90L7Qs9C+INC70LjRgdGC0LAiKSkNCiAgICB9DQogICAgLy8gaXMxXzIgPSDQtdGB0LvQuCDQv9C+0LvQtSDQntCa0KLQnNCeINC90LUg0LfQsNC/0L7Qu9C90LXQvdC+INCyINGA0LDQt9C00LXQu9C1IDEuMg0KICAgIGJvb2xlYW4gaXMxXzIgPSBuYWxQVU1lc0ZvdW5kICYmIChva3Rtb05hbFBVTWVzID09IG51bGwgfHwgb2t0bW9OYWxQVU1lcy50cmltKCkuaXNFbXB0eSgpKQ0KICAgIGlmIChva3Rtb05hbFBVQXYgPT0gbnVsbCB8fCBva3Rtb05hbFBVQXYudHJpbSgpLmlzRW1wdHkoKSB8fCBpczFfMikgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQn9C+0LTRgNCw0LfQtNC10LsgMS4xIiArIChpczFfMiA/ICIsIDEuMiIgOiAiIiksICLQmtC+0LQg0L/QviDQntCa0KLQnNCeIiwgItCd0LDQu9Cf0KPQkNCyLtCe0JrQotCc0J4iICsgKGlzMV8yID8gIiwg0J3QsNC70J/Qo9Cc0LXRgS7QntCa0KLQnNCeIiA6ICIiKSwgItCe0JrQotCc0J4iKSkNCiAgICB9DQogICAgaWYgKGlubkp1bE5wSnVsID09IG51bGwgfHwgaW5uSnVsTnBKdWwudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0JjQndCdINC90LDQu9C+0LPQvtC/0LvQsNGC0LXQu9GM0YnQuNC60LAiLCAi0J3Qn9Cu0Jsu0JjQndCd0K7QmyIsICLQmNCd0J0iKSkNCiAgICB9DQogICAgaWYgKGtwcEp1bE5wSnVsID09IG51bGwgfHwga3BwSnVsTnBKdWwudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0JrQn9CfINC90LDQu9C+0LPQvtC/0LvQsNGC0LXQu9GM0YnQuNC60LAiLCAi0J3Qn9Cu0Jsu0JrQn9CfIiwgItCa0J/QnyIpKQ0KICAgIH0NCiAgICBpZiAoa29kTk8gPT0gbnVsbCB8fCBrb2ROTy50cmltKCkuaXNFbXB0eSgpKSB7DQogICAgICAgIGxvZ2dlci5sb2cobG9nTGV2ZWwsIGdldE1lc3NhZ2UoItCd0LDQuNC80LXQvdC+0LLQsNC90LjQtSB4bWwg0YTQsNC50LvQsCAo0LrQvtC9LiDQvdCw0LvQvtCz0L7QstGL0Lkg0L7RgNCz0LDQvSkg0Lgg0YLQuNGC0YPQu9GM0L3Ri9C5INC70LjRgdGCIiwgItCa0L7QtCDQvdCw0LvQvtCz0L7QstC+0LPQviDQvtGA0LPQsNC90LAiLCAi0JTQvtC60YPQvNC10L3Rgi7QmtC+0LTQndCeIiwgItCa0L7QtCDQvdCw0LvQvtCz0L7QstC+0LPQviDQvtGA0LPQsNC90LAgKNC60L7QvS4pIikpDQogICAgfQ0KICAgIGlmIChrb2ROT1Byb20gPT0gbnVsbCB8fCBrb2ROT1Byb20udHJpbSgpLmlzRW1wdHkoKSB8fCAibnVsbCIuZXF1YWxzKGtvZE5PUHJvbSkpIHsNCiAgICAgICAgbG9nZ2VyLmxvZyhsb2dMZXZlbCwgZ2V0UHJvbU1lc3NhZ2UoItCa0L7QtCDQvdCw0LvQvtCz0L7QstC+0LPQviDQvtGA0LPQsNC90LAgKNC/0YDQvtC8LikiKSkNCiAgICB9DQogICAgaWYgKG9rdmVkID09IG51bGwgfHwgb2t2ZWQudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0JrQvtC0INCy0LjQtNCwINGN0LrQvtC90L7QvNC40YfQtdGB0LrQvtC5INC00LXRj9GC0LXQu9GM0L3QvtGB0YLQuCDQuCDQv9C+INC60LvQsNGB0YHQuNGE0LjQutCw0YLQvtGA0YMg0J7QmtCS0K3QlCIsICLQodCy0J3Qny7QntCa0JLQrdCUIiwgItCa0L7QtCDQstC40LTQsCDRjdC60L7QvdC+0LzQuNGH0LXRgdC60L7QuSDQtNC10Y/RgtC10LvRjNC90L7RgdGC0Lgg0Lgg0L/QviDQutC70LDRgdGB0LjRhNC40LrQsNGC0L7RgNGDINCe0JrQktCt0JQiKSkNCiAgICB9DQogICAgaWYgKChmb3JtUmVvcmcgIT0gbnVsbCAmJiBmb3JtUmVvcmcgIT0gJzAnKSAmJiAoaW5uSnVsU3ZSZW9yZ0p1bCA9PSBudWxsIHx8IGlubkp1bFN2UmVvcmdKdWwudHJpbSgpLmlzRW1wdHkoKSkpIHsNCiAgICAgICAgbG9nZ2VyLmxvZyhsb2dMZXZlbCwgZ2V0UmVvcmdNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0JjQndCdINGA0LXQvtGA0LPQsNC90LjQt9C+0LLQsNC90L3QvtC5INC+0YDQs9Cw0L3QuNC30LDRhtC40LggKNC+0LHQvtGB0L7QsdC70LXQvdC90L7Qs9C+INC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPKSIsICLQodCy0KDQtdC+0YDQs9Cu0Jsu0JjQndCd0K7QmyIsICLQmNCd0J0g0YDQtdC+0YDQs9Cw0L3QuNC30L7QstCw0L3QvdC+0LPQviDQvtCx0L7RgdC+0LHQu9C10L3QvdC+0LPQviDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyIpKQ0KICAgIH0NCiAgICBpZiAoKGZvcm1SZW9yZyAhPSBudWxsICYmIGZvcm1SZW9yZyAhPSAnMCcpICYmIChrcHBTdlJlb3JnSnVsID09IG51bGwgfHwga3BwU3ZSZW9yZ0p1bC50cmltKCkuaXNFbXB0eSgpKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRSZW9yZ01lc3NhZ2UoItCi0LjRgtGD0LvRjNC90YvQuSDQu9C40YHRgiIsICLQmtCf0J8g0YDQtdC+0YDQs9Cw0L3QuNC30L7QstCw0L3QvdC+0Lkg0L7RgNCz0LDQvdC40LfQsNGG0LjQuCAo0L7QsdC+0YHQvtCx0LvQtdC90L3QvtCz0L4g0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8pIiwgItCh0LLQoNC10L7RgNCz0K7Qmy7QmtCf0J8iLCAi0JrQn9CfINGA0LXQvtGA0LPQsNC90LjQt9C+0LLQsNC90L3QvtCz0L4g0L7QsdC+0YHQvtCx0LvQtdC90L3QvtCz0L4g0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8iKSkNCiAgICB9DQogICAgaWYgKHByUG9kcCA9PSBudWxsIHx8IHByUG9kcC50cmltKCkuaXNFbXB0eSgpKSB7DQogICAgICAgIGxvZ2dlci5sb2cobG9nTGV2ZWwsIGdldE1lc3NhZ2UoItCi0LjRgtGD0LvRjNC90YvQuSDQu9C40YHRgiIsICLQn9GA0LjQt9C90LDQuiDQu9C40YbQsCwg0L/QvtC00L/QuNGB0LDQstGI0LXQs9C+INC00L7QutGD0LzQtdC90YIiLCAi0J/QvtC00L/QuNGB0LDQvdGCLtCf0YDQn9C+0LTQvyIsICLQn9GA0LjQt9C90LDQuiDQu9C40YbQsCDQv9C+0LTQv9C40YHQsNCy0YjQtdCz0L4g0LTQvtC60YPQvNC10L3RgiIpKQ0KICAgIH0NCiAgICBpZiAoc2lnbmF0b3J5U3VybmFtZSA9PSBudWxsIHx8IHNpZ25hdG9yeVN1cm5hbWUudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0KTQsNC80LjQu9C40Y8iLCAi0J/QvtC00L/QuNGB0LDQvdGCLtCk0LDQvNC40LvQuNGPIiwgItCk0LDQvNC40LvQuNGPINC/0L7QtNC/0LjRgdCw0L3RgtCwIikpDQogICAgfQ0KICAgIGlmIChzaWduYXRvcnlGaXJzdE5hbWUgPT0gbnVsbCB8fCBzaWduYXRvcnlGaXJzdE5hbWUudHJpbSgpLmlzRW1wdHkoKSkgew0KICAgICAgICBsb2dnZXIubG9nKGxvZ0xldmVsLCBnZXRNZXNzYWdlKCLQotC40YLRg9C70YzQvdGL0Lkg0LvQuNGB0YIiLCAi0JjQvNGPIiwgItCf0L7QtNC/0LjRgdCw0L3Rgi7QmNC80Y8iLCAi0JjQvNGPINC/0L7QtNC/0LjRgdCw0L3RgtCwIikp'
        longString += ''
        longString += ''
        longString += ''
        longString += ''
        longString += ''
        longString += ''
        longString += ''
        longString += ''
        longString += '0L7QtCAiOSDQvNC10YHRj9GG0LXQsiINCiAgICAgICAgcmV0dXJuIHJlcG9ydFBlcmlvZA0KICAgIH0NCiAgICByZXR1cm4gbnVsbA0KfQ0KDQovKioNCiAqINCf0L7Qu9GD0YfQuNGC0Ywg0LfQvdCw0YfQtdC90LjQtSDRj9GH0LXQudC60Lgg0YTQuNC60YHQuNGA0L7QstCw0L3QvdC+0Lkg0YHRgtGA0L7QutC4INC40Lcg0L3QsNC70L7Qs9C+0LLQvtC5INGE0L7RgNC80YsuDQogKg0KICogQHBhcmFtIGRhdGFSb3dzINGB0YLRgNC+0LrQuCDQvdGEDQogKiBAcGFyYW0gY29sdW1uTmFtZSDQvdCw0LfQstCw0L3QuNC1INGB0YLQvtC70LHRhtCwDQogKiBAcGFyYW0gYWxpYXMg0LDQu9C40LDRgSDRgdGC0YDQvtC60LgNCiAqIEByZXR1cm4g0LfQvdCw0YfQtdC90LjQtSDRgdGC0L7Qu9Cx0YbQsA0KICoNCiAqLw0KZGVmIGdldEFsaWFzRnJvbUZvcm0oZGVmIGRhdGFSb3dzLCBkZWYgY29sdW1uTmFtZSwgZGVmIGFsaWFzKSB7DQogICAgaWYgKGRhdGFSb3dzICE9IG51bGwgJiYgIWRhdGFSb3dzLmlzRW1wdHkoKSkgew0KICAgICAgICBkZWYgYWxpYXNSb3cgPSBnZXREYXRhUm93KGRhdGFSb3dzLCBhbGlhcykNCiAgICAgICAgcmV0dXJuIGdldExvbmcoYWxpYXNSb3cuZ2V0Q2VsbChjb2x1bW5OYW1lKS52YWx1ZSkNCiAgICB9DQogICAgcmV0dXJuIDANCn0NCg0KLy8g0J/QvtC70YPRh9C40YLRjCDQv9Cw0YDQsNC80LXRgtGA0Ysg0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8gKNC40Lcg0YHQv9GA0LDQstC+0YfQvdC40LrQsCAzMykNCmRlZiBnZXREZXBhcnRtZW50UGFyYW0oKSB7DQogICAgaWYgKGRlcGFydG1lbnRQYXJhbSA9PSBudWxsKSB7DQogICAgICAgIGRlZiBkZXBhcnRtZW50SWQgPSBkZWNsYXJhdGlvbkRhdGEuZGVwYXJ0bWVudElkDQogICAgICAgIGRlZiBkZXBhcnRtZW50UGFyYW1MaXN0ID0gZ2V0UHJvdmlkZXIoMzMpLmdldFJlY29yZHMoZ2V0RW5kRGF0ZSgpIC0gMSwgbnVsbCwgIkRFUEFSVE1FTlRfSUQgPSAkZGVwYXJ0bWVudElkIiwgbnVsbCkNCiAgICAgICAgaWYgKGRlcGFydG1lbnRQYXJhbUxpc3QgPT0gbnVsbCB8fCBkZXBhcnRtZW50UGFyYW1MaXN0LnNpemUoKSA9PSAwIHx8IGRlcGFydG1lbnRQYXJhbUxpc3QuZ2V0KDApID09IG51bGwpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oItCe0YjQuNCx0LrQsCDQv9GA0Lgg0L/QvtC70YPRh9C10L3QuNC4INC90LDRgdGC0YDQvtC10Log0L7QsdC+0YHQvtCx0LvQtdC90L3QvtCz0L4g0L/QvtC00YDQsNC30LTQtdC70LXQvdC40Y8uINCd0LDRgdGC0YDQvtC50LrQuCDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjyDQt9Cw0L/QvtC70L3QtdC90Ysg0L3QtSDQv9C+0LvQvdC+0YHRgtGM0Y4iKQ0KICAgICAgICB9DQogICAgICAgIGRlcGFydG1lbnRQYXJhbSA9IGRlcGFydG1lbnRQYXJhbUxpc3Q/LmdldCgwKQ0KICAgIH0NCiAgICByZXR1cm4gZGVwYXJ0bWVudFBhcmFtDQp9DQoNCi8vINCf0L7Qu9GD0YfQuNGC0Ywg0L/QsNGA0LDQvNC10YLRgNGLINC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPICjQuNC3INGB0L/RgNCw0LLQvtGH0L3QuNC60LAgMzMwKQ0KZGVmIGdldERlcGFydG1lbnRQYXJhbVRhYmxlKGRlZiBkZXBhcnRtZW50UGFyYW1JZCkgew0KICAgIGlmIChkZXBhcnRtZW50UGFyYW1UYWJsZSA9PSBudWxsKSB7DQogICAgICAgIGRlZiBmaWx0ZXIgPSAiTElOSyA9ICRkZXBhcnRtZW50UGFyYW1JZCBhbmQgS1BQID0nJHtkZWNsYXJhdGlvbkRhdGEua3BwfSciDQogICAgICAgIGRlZiBkZXBhcnRtZW50UGFyYW1UYWJsZUxpc3QgPSBnZXRQcm92aWRlcigzMzApLmdldFJlY29yZHMoZ2V0RW5kRGF0ZSgpIC0gMSwgbnVsbCwgZmlsdGVyLCBudWxsKQ0KICAgICAgICBpZiAoZGVwYXJ0bWVudFBhcmFtVGFibGVMaXN0ID09IG51bGwgfHwgZGVwYXJ0bWVudFBhcmFtVGFibGVMaXN0LnNpemUoKSA9PSAwIHx8IGRlcGFydG1lbnRQYXJhbVRhYmxlTGlzdC5nZXQoMCkgPT0gbnVsbCkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigi0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0L3QsNGB0YLRgNC+0LXQuiDQvtCx0L7RgdC+0LHQu9C10L3QvdC+0LPQviDQv9C+0LTRgNCw0LfQtNC10LvQtdC90LjRjy4g0J3QsNGB0YLRgNC+0LnQutC4INC/0L7QtNGA0LDQt9C00LXQu9C10L3QuNGPINC30LDQv9C+0LvQvdC10L3RiyDQvdC1INC/0L7Qu9C90L7RgdGC0YzRjiIpDQogICAgICAgIH0NCiAgICAgICAgZGVwYXJ0bWVudFBhcmFtVGFibGUgPSBkZXBhcnRtZW50UGFyYW1UYWJsZUxpc3QuZ2V0KDApDQogICAgfQ0KICAgIHJldHVybiBkZXBhcnRtZW50UGFyYW1UYWJsZQ0KfQ0KDQovLyDQl9Cw0LPRgNGD0LfQutCwINCy0YHQtdGFINC30LDQv9C40YHQtdC5INGB0L/RgNCw0LLQvtGH0L3QuNC60L7QsiDQsiDQutC10YguDQpkZWYgZmlsbFJlY29yZHNNYXAoZGVmIHJlZkJvb2tJZHMpIHsNCiAgICByZWZCb29rSWRzLmVhY2ggeyByZWZCb29rSWQgLT4NCiAgICAgICAgZGVmIHByb3ZpZGVyID0gcmVmQm9va0ZhY3RvcnkuZ2V0RGF0YVByb3ZpZGVyKHJlZkJvb2tJZCkNCiAgICAgICAgZGVmIHJlY29yZHMgPSBwcm92aWRlci5nZXRSZWNvcmRzKGdldEVuZERhdGUoKSwgbnVsbCwgbnVsbCwgbnVsbCkNCiAgICAgICAgaWYgKHJlY29yZHMpIHsNCiAgICAgICAgICAgIHJlY29yZHMuZWFjaCB7IHJlY29yZCAtPg0KICAgICAgICAgICAgICAgIGRlZiByZWNvcmRJZCA9IHJlY29yZC5nZXQoUmVmQm9vay5SRUNPUkRfSURfQUxJQVMpLm51bWJlclZhbHVlDQogICAgICAgICAgICAgICAgZGVmIGtleSA9IGdldFJlZkJvb2tDYWNoZUtleShyZWZCb29rSWQsIHJlY29yZElkKQ0KICAgICAgICAgICAgICAgIGlmICghcmVmQm9va0NhY2hlLmNvbnRhaW5zS2V5KGtleSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmVmQm9va0NhY2hlLnB1dChrZXksIHJlZkJvb2tTZXJ2aWNlLmdldFJlY29yZERhdGEocmVmQm9va0lkLCByZWNvcmRJZCkpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpkZWYgZ2VuZXJhdGVYbWxGaWxlSWQoU3RyaW5nIHRheE9yZ2FuQ29kZVByb20sIFN0cmluZyB0YXhPcmdhbkNvZGUpIHsNCiAgICBkZWYgZGVwYXJ0bWVudFBhcmFtID0gZ2V0RGVwYXJ0bWVudFBhcmFtKCkNCiAgICBpZiAoZGVwYXJ0bWVudFBhcmFtKSB7DQogICAgICAgIGRlZiBkYXRlID0gQ2FsZW5kYXIuZ2V0SW5zdGFuY2UoKS5nZXRUaW1lKCk/LmZvcm1hdCgieXl5eU1NZGQiKQ0KICAgICAgICBkZWYgZmlsZUlkID0gVGF4VHlwZS5JTkNPTUUuZGVjbGFyYXRpb25QcmVmaXggKyAnXycgKw0KICAgICAgICAgICAgICAgIHRheE9yZ2FuQ29kZVByb20gKyAnXycgKw0KICAgICAgICAgICAgICAgIHRheE9yZ2FuQ29kZSArICdfJyArDQogICAgICAgICAgICAgICAgZGVwYXJ0bWVudFBhcmFtLklOTj8udmFsdWUgKw0KICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uRGF0YS5rcHAgKyAiXyIgKw0KICAgICAgICAgICAgICAgIGRhdGUgKyAiXyIgKw0KICAgICAgICAgICAgICAgIFVVSUQucmFuZG9tVVVJRCgpLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKQ0KICAgICAgICByZXR1cm4gZmlsZUlkDQogICAgfQ0KICAgIHJldHVybiBudWxsDQp9'

        addLongText(template_id, longString, 'CREATE_SCRIPT')
        logger.info("К версии макета добавлен скрипт")
    }

} catch (Exception ex) {
    logger.error("Error: ${ex.getLocalizedMessage()}. Все изменения откатаны")
}

def void addTypeTemplate(DeclarationType type, DeclarationTemplate template, boolean createType, boolean createTemplate) {
    def type_id = type.id ?: ""
    def type_name = type.name ?: ""
    def type_tax_type = type.taxType.code ?: ""
    def type_is_ifrs = type.isIfrs ? 1 : 0
    def type_ifrs_name = type.ifrsName ?: ""

    def template_id = template.id ?: ""
    def template_name = template.name ?: ""
    def template_version = template.version.format("dd.MM.yy")

    String declarationTypeSql = "INSERT INTO DECLARATION_TYPE (ID, NAME, TAX_TYPE, STATUS, IS_IFRS, IFRS_NAME) VALUES " +
            "('$type_id', '$type_name', '$type_tax_type', '0', '$type_is_ifrs', '$type_ifrs_name')"
    if (createType) {
        namedParameterJdbcTemplate.update(declarationTypeSql, [:])
        logger.info("Создан тип декларации с id = $type_id без версии макета")
    }

    String templateSql = "INSERT INTO DECLARATION_TEMPLATE (ID, DECLARATION_TYPE_ID, NAME, VERSION, STATUS) VALUES " +
            "($template_id, '$type_id', '$template_name', TO_DATE('$template_version', 'DD.MM.RR'), '1')"
    if (createTemplate) {
        namedParameterJdbcTemplate.update(templateSql, [:])
        logger.info("Создан макет декларации с id = $template_id для типа декларации с id = $type_id, но без xsd, jrxml и скрипта")
    }
}

def void addLongText(def template_id, String longString, String alias) {
    final int MAX_LENGTH = 2000
    namedParameterJdbcTemplate.update("UPDATE DECLARATION_TEMPLATE SET $alias = null where id = $template_id", [:])
    int start = 0
    longString = new String(longString.decodeBase64(), "UTF-8")
    while (start < longString.length()) {
        int end = (start + MAX_LENGTH) < longString.length() ? (start + MAX_LENGTH) : longString.length()
        String text = longString.substring(start, end)
        namedParameterJdbcTemplate.update('UPDATE DECLARATION_TEMPLATE SET ' + alias + ' = ' + alias + ' || :text where id = ' +template_id, ['text' : text])
        start += MAX_LENGTH
    }
}