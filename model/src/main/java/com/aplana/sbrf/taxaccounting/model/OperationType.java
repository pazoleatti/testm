package com.aplana.sbrf.taxaccounting.model;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * Содержит перечень по операциям для которых устанавливается блокировка. Необходим поскольку сейчас блокировка устанавливается
 * в зависимости от операции, а не от типа асинхронной задачи. В будущем не исключено, что необходимость в этом перечислении отпадет.
 * Содержит поля соответствующие идентификатору типа асинхронной задачи и описанию операции. Для синхронных операций идентификатор типа асинхронной задачи равен null.
 */
@Getter @AllArgsConstructor
public enum OperationType implements LockTaskType {

    RETURN_DECLARATION(null, "Возврат формы из подготовлена/принята в создана"),
    EDIT(null, "Редактирование строки налоговой формы"),
    EDIT_FILE(null, "Добавление/удаление файлов/комментариев"),
    RNU_NDFL_PERSON_DB(26L, "Формирование отчета РНУ НДФЛ по ФЛ"),
    RNU_NDFL_PERSON_ALL_DB(26L, "Формирование отчета РНУ НДФЛ по всем ФЛ"),
    REPORT_KPP_OKTMO(26L,"Формирование \"Реестр сформированной отчетности\""),
    RNU_RATE_REPORT(26L,"Формирование отчета \"Отчет в разрезе ставок\""),
    RNU_PAYMENT_REPORT(26L,"Формирование отчета \"Отчет в разрезе платежных поручений\""),
    RNU_NDFL_DETAIL_REPORT(26L, "Формирование отчета \"Детализация - доходы, вычеты, налоги\""),
    RNU_NDFL_2_6_DATA_XLSX_REPORT(26L,"Формирование отчета \"Данные для включения в разделы 2-НДФЛ и 6-НДФЛ\""),
    RNU_NDFL_2_6_DATA_TXT_REPORT(26L, "Формирование файла выгрузки \"Данные для включения в разделы 2-НДФЛ и 6-НДФЛ\""),
    REPORT_2NDFL1(26L, "Формирование 2НДФЛ (1) по ФЛ"),
    REPORT_2NDFL2(26L, "Формирование 2НДФЛ (2) по ФЛ");

    /**
     * Идентификатор типа асинхронной задачи
     */
    private Long asyncTaskTypeId;
    private String name;

}
